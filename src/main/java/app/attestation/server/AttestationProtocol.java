package app.attestation.server;

import app.attestation.server.attestation.Attestation;
import app.attestation.server.attestation.AttestationApplicationId;
import app.attestation.server.attestation.AttestationPackageInfo;
import app.attestation.server.attestation.AuthorizationList;
import app.attestation.server.attestation.RootOfTrust;
import com.almworks.sqlite4java.SQLiteConnection;
import com.almworks.sqlite4java.SQLiteException;
import com.almworks.sqlite4java.SQLiteStatement;
import com.github.benmanes.caffeine.cache.Cache;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hashing;
import com.google.common.io.BaseEncoding;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Logger;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Inflater;

class AttestationProtocol {
    private static final Logger logger = Logger.getLogger(AttestationProtocol.class.getName());

    static final File ATTESTATION_DATABASE = new File("attestation.db");

    // Developer previews set osVersion to 0 as a placeholder value.
    private static final int DEVELOPER_PREVIEW_OS_VERSION = 0;

    static final int CHALLENGE_LENGTH = 32;
    private static final String SIGNATURE_ALGORITHM = "SHA256WithECDSA";
    private static final HashFunction FINGERPRINT_HASH_FUNCTION = Hashing.sha256();
    private static final int FINGERPRINT_LENGTH = FINGERPRINT_HASH_FUNCTION.bits() / 8;

    private static final boolean ALLOW_ATTEST_KEY_DOWNGRADE = true;

    // Challenge message:
    //
    // byte maxVersion = PROTOCOL_VERSION
    // byte[] challenge index (length: CHALLENGE_LENGTH)
    // byte[] challenge (length: CHALLENGE_LENGTH)
    //
    // The challenge index is randomly generated by Auditor and used for all future challenge
    // messages from that Auditor. It's used on the Auditee as an index to choose the correct
    // persistent key to satisfy the Auditor, rather than only supporting pairing with one. In
    // theory, the Auditor could authenticate to the Auditee, but this app already provides a
    // better way to do that by doing the same process in reverse for a supported device.
    //
    // The challenge is randomly generated by the Auditor and serves the security function of
    // enforcing that the results are fresh. It's returned inside the attestation certificate
    // which has a signature from the device's provisioned key (not usable by the OS) and the
    // outer signature from the hardware-backed key generated for the initial pairing.
    //
    // Attestation message:
    //
    // For backwards compatibility the Auditor device sends its maximum supported version, and
    // the Auditee uses the highest version it supports.
    //
    // Compression is done with raw DEFLATE (no zlib wrapper) with a preset dictionary generated from
    // sample certificates.
    //
    // signed message {
    // byte version = min(maxVersion, PROTOCOL_VERSION)
    // short compressedChainLength
    // byte[] compressedChain { [short encodedCertificateLength, byte[] encodedCertificate] }
    // byte[] fingerprint (length: FINGERPRINT_LENGTH)
    // int osEnforcedFlags
    // }
    // byte[] signature (rest of message)
    //
    // Protocol version changes:
    //
    // 3: replace deflate_dictionary_2 with deflate_dictionary_3
    // 4: add attest key for existing pairings and offset the pinning cert chain check to accept it
    //
    // For each audit, the Auditee generates a fresh hardware-backed key with key attestation
    // using the provided challenge. It reports back the certificate chain to be verified by the
    // Auditor. The public key certificate of the generated key is signed by a key provisioned on
    // the device (not usable by the OS) chaining up to an intermediate and the Google root. The
    // certificate contains the key attestation metadata including the important fields with the
    // lock state, verified boot state, the verified boot public key fingerprint and the OS
    // version / patch level:
    //
    // https://developer.android.com/training/articles/security-key-attestation.html#certificate_schema
    //
    // The Auditee keeps the first hardware-backed key generated for a challenge index and uses it
    // to sign all future attestations. The fingerprint of the persistent key is included in the
    // attestation message for the Auditor to find the corresponding pinning data. Other keys are
    // never actually used, only generated for fresh key attestation data.
    //
    // The OS can use the persistent generated hardware-backed key for signing but cannot obtain
    // the private key. The key isn't be usable if verified boot fails or the OS is downgraded and
    // the keys are protected against replay attacks via the Replay Protected Memory Block.
    // Devices launching with Android P or later can provide a StrongBox Keymaster to support
    // storing the keys in a dedicated hardware security module to substantially reduce the attack
    // surface for obtaining the keys. StrongBox is paired with the TEE and the TEE corroborates
    // the validity of the keys and attestation. The Pixel 3 and 3 XL are the first devices with a
    // StrongBox implementation via the Titan M security chip.
    //
    // https://android-developers.googleblog.com/2018/10/building-titan-better-security-through.html
    //
    // The attestation message also includes osEnforcedFlags with data obtained at the OS level,
    // which is vulnerable to tampering by an attacker with control over the OS. However, the OS
    // did get verified by verified boot so without a verified boot bypass they would need to keep
    // exploiting it after booting. The bootloader / TEE verified OS version / OS patch level are
    // a useful mitigation as they reveal that the OS isn't upgraded even if an attacker has root.
    //
    // The Auditor saves the initial certificate chain, using the initial certificate to verify
    // the outer signature and the rest of the chain for pinning the expected chain. It enforces
    // downgrade protection for the OS version/patch (bootloader/TEE enforced) and app version (OS
    // enforced) by keeping them updated.
    static final byte PROTOCOL_VERSION = 4;
    private static final byte PROTOCOL_VERSION_MINIMUM = 2;
    // can become longer in the future, but this is the minimum length
    private static final byte CHALLENGE_MESSAGE_LENGTH = 1 + CHALLENGE_LENGTH * 2;
    private static final int MAX_ENCODED_CHAIN_LENGTH = 5000;
    static final int MAX_MESSAGE_SIZE = 2953;

    private static final int OS_ENFORCED_FLAGS_NONE = 0;
    private static final int OS_ENFORCED_FLAGS_USER_PROFILE_SECURE = 1;
    private static final int OS_ENFORCED_FLAGS_ACCESSIBILITY = 1 << 1;
    private static final int OS_ENFORCED_FLAGS_DEVICE_ADMIN = 1 << 2;
    private static final int OS_ENFORCED_FLAGS_ADB_ENABLED = 1 << 3;
    private static final int OS_ENFORCED_FLAGS_ADD_USERS_WHEN_LOCKED = 1 << 4;
    private static final int OS_ENFORCED_FLAGS_ENROLLED_BIOMETRICS = 1 << 5;
    private static final int OS_ENFORCED_FLAGS_DENY_NEW_USB = 1 << 6;
    private static final int OS_ENFORCED_FLAGS_DEVICE_ADMIN_NON_SYSTEM = 1 << 7;
    private static final int OS_ENFORCED_FLAGS_OEM_UNLOCK_ALLOWED = 1 << 8;
    private static final int OS_ENFORCED_FLAGS_SYSTEM_USER = 1 << 9;
    private static final int OS_ENFORCED_FLAGS_ALL =
            OS_ENFORCED_FLAGS_USER_PROFILE_SECURE |
            OS_ENFORCED_FLAGS_ACCESSIBILITY |
            OS_ENFORCED_FLAGS_DEVICE_ADMIN |
            OS_ENFORCED_FLAGS_ADB_ENABLED |
            OS_ENFORCED_FLAGS_ADD_USERS_WHEN_LOCKED |
            OS_ENFORCED_FLAGS_ENROLLED_BIOMETRICS |
            OS_ENFORCED_FLAGS_DENY_NEW_USB |
            OS_ENFORCED_FLAGS_DEVICE_ADMIN_NON_SYSTEM |
            OS_ENFORCED_FLAGS_OEM_UNLOCK_ALLOWED |
            OS_ENFORCED_FLAGS_SYSTEM_USER;

    private static final String ATTESTATION_APP_PACKAGE_NAME = "app.attestation.auditor";
    private static final int ATTESTATION_APP_MINIMUM_VERSION = 22;
    private static final String ATTESTATION_APP_SIGNATURE_DIGEST_DEBUG =
            "17727D8B61D55A864936B1A7B4A2554A15151F32EBCF44CDAA6E6C3258231890";
    private static final String ATTESTATION_APP_SIGNATURE_DIGEST_RELEASE =
            "990E04F0864B19F14F84E0E432F7A393F297AB105A22C1E1B10B442A4A62C42C";
    private static final int OS_VERSION_MINIMUM = 80000;
    private static final int OS_PATCH_LEVEL_MINIMUM = 201801;
    private static final int VENDOR_PATCH_LEVEL_MINIMUM = 201808;
    private static final int BOOT_PATCH_LEVEL_MINIMUM = 201809;

    private static final String DEVICE_HUAWEI = "Huawei Honor 9 lite / Honor 10 / View 10 / Mate 10 / Mate 20 / Mate 20 lite / P smart 2019 / Pro / P20 / P20 Pro / Y9 2019";
    private static final String DEVICE_HUAWEI_HONOR_7A_PRO = "Huawei Honor 7A Pro / Y7 2019";
    private static final String DEVICE_NOKIA = "Nokia (6.1, 6.1 Plus, 7 Plus)";
    private static final String DEVICE_NOKIA_3_1 = "Nokia 3.1";
    private static final String DEVICE_NOKIA_7_1 = "Nokia 7.1";
    private static final String DEVICE_PIXEL_2 = "Google Pixel 2";
    private static final String DEVICE_PIXEL_2_XL = "Google Pixel 2 XL";
    private static final String DEVICE_PIXEL_3_GENERIC = "Google Pixel 3 / Pixel 3 XL";
    private static final String DEVICE_PIXEL_3 = "Google Pixel 3";
    private static final String DEVICE_PIXEL_3_XL = "Google Pixel 3 XL";
    private static final String DEVICE_PIXEL_3A_GENERIC = "Google Pixel 3a / Pixel 3a XL";
    private static final String DEVICE_PIXEL_3A = "Google Pixel 3a";
    private static final String DEVICE_PIXEL_3A_XL = "Google Pixel 3a XL";
    private static final String DEVICE_PIXEL_4_GENERIC = "Google Pixel 4 / Pixel 4 XL";
    private static final String DEVICE_PIXEL_4 = "Google Pixel 4";
    private static final String DEVICE_PIXEL_4_XL = "Google Pixel 4 XL";
    private static final String DEVICE_PIXEL_4a = "Google Pixel 4a";
    private static final String DEVICE_PIXEL_4a_5G = "Google Pixel 4a (5G)";
    private static final String DEVICE_PIXEL_5 = "Google Pixel 5";
    private static final String DEVICE_PIXEL_5_GENERIC = "Google Pixel 4a (5G) / Pixel 5";
    private static final String DEVICE_PIXEL_5a = "Google Pixel 5a";
    private static final String DEVICE_PIXEL_6 = "Google Pixel 6";
    private static final String DEVICE_PIXEL_6_PRO = "Google Pixel 6 Pro";
    private static final String DEVICE_PIXEL_6A = "Google Pixel 6a";
    private static final String DEVICE_SM_A705FN = "Samsung Galaxy A70 (SM-A705FN)";
    private static final String DEVICE_SM_G960F = "Samsung Galaxy S9 (SM-G960F)";
    private static final String DEVICE_SM_G960_NA = "Samsung Galaxy S9 USA/Canada (SM-G960U/SM-G960U1/SM-G960W)";
    private static final String DEVICE_SM_G9600 = "Samsung Galaxy S9 China (G9600)";
    private static final String DEVICE_SM_G965F = "Samsung Galaxy S9+ (SM-G965F)";
    private static final String DEVICE_SM_G965_MSM = "Samsung Galaxy S9+ (Snapdragon)";
    private static final String DEVICE_SM_G970F = "Samsung Galaxy S10e (SM-G970F)";
    private static final String DEVICE_SM_G975F = "Samsung Galaxy S10+ (SM-G975F)";
    private static final String DEVICE_SM_J260A = "Samsung Galaxy J2 Core (SM-J260A)";
    private static final String DEVICE_SM_J260T1 = "Samsung Galaxy J2 Core (SM-J260T1)";
    private static final String DEVICE_SM_J260F = "Samsung Galaxy J2 Core (SM-J260F)";
    private static final String DEVICE_SM_J337A = "Samsung Galaxy J3 2018 (SM-J337A) / Galaxy Amp Prime 3 (SM-J337AZ)";
    private static final String DEVICE_SM_J337T = "Samsung Galaxy J3 (SM-J337T)";
    private static final String DEVICE_SM_J720F = "Samsung Galaxy J7 Duo (SM-J720F)";
    private static final String DEVICE_SM_M205F = "Samsung Galaxy M20 (SM-M205F)";
    private static final String DEVICE_SM_N960F = "Samsung Galaxy Note 9 (SM-N960F)";
    private static final String DEVICE_SM_N960U = "Samsung Galaxy Note 9 (SM-N960U)";
    private static final String DEVICE_SM_N970F = "Samsung Galaxy Note 10 (SM-N970F)";
    private static final String DEVICE_SM_N970U = "Samsung Galaxy Note 10 (SM-N970U)";
    private static final String DEVICE_SM_N975U = "Samsung Galaxy Note 10+ (SM-N975U)";
    private static final String DEVICE_SM_T510 = "Samsung Galaxy Tab A 10.1 (2019)";
    private static final String DEVICE_SM_T835 = "Samsung Galaxy Tab S4";
    private static final String DEVICE_SM_J737T1 = "Samsung Galaxy J7 (SM-J737T1)";
    private static final String DEVICE_SM_S367VL = "Samsung Galaxy J3 (SM-S367VL)";
    private static final String DEVICE_SONY_XPERIA_XA2 = "Sony Xperia XA2";
    private static final String DEVICE_SONY_XPERIA_XZ1 = "Sony Xperia XZ1 / Xperia XZ1 Compact";
    private static final String DEVICE_SONY_XPERIA_XZ2 = "Sony Xperia XZ2 (H8216)";
    private static final String DEVICE_SONY_XPERIA_XZ2_COMPACT = "Sony Xperia XZ2 Compact";
    private static final String DEVICE_ONEPLUS_6_A6003 = "OnePlus 6 A6003";
    private static final String DEVICE_ONEPLUS_6T_A6013 = "OnePlus 6T A6013";
    private static final String DEVICE_ONEPLUS_7_PRO_GM1913 = "OnePlus 7 Pro GM1913";
    private static final String DEVICE_BLACKBERRY_KEY2 = "BlackBerry Key2";
    private static final String DEVICE_BQ_AQUARIS_X2_PRO = "BQ Aquaris X2 Pro";
    private static final String DEVICE_XIAOMI_MI_A2 = "Xiaomi Mi A2 / POCOPHONE F1";
    private static final String DEVICE_XIAOMI_MI_A2_LITE = "Xiaomi Mi A2 Lite";
    private static final String DEVICE_XIAOMI_MI_9 = "Xiaomi Mi 9";
    private static final String DEVICE_HTC = "HTC EXODUS 1 / U12+";
    private static final String DEVICE_MOTO_G7 = "Motorola moto g⁷";
    private static final String DEVICE_MOTOROLA_ONE_VISION = "Motorola One Vision";
    private static final String DEVICE_VIVO_1807 = "Vivo 1807";
    private static final String DEVICE_REVVL_2 = "T-Mobile REVVL 2";
    private static final String DEVICE_OPPO_CPH1831 = "Oppo R15 Pro (CPH1831)";
    private static final String DEVICE_OPPO_CPH1903 = "Oppo A7 (CPH1903)";
    private static final String DEVICE_OPPO_CPH1909 = "Oppo A5s (CPH1909)";
    private static final String DEVICE_LM_Q720 = "LG Stylo 5 (LM-Q720)";
    private static final String DEVICE_LG_Q710AL = "LG Q Stylo 4 (LG-Q710AL)";
    private static final String DEVICE_RMX1941 = "Realme C2 (RMX1941)";

    private static final String OS_STOCK = "Stock";
    private static final String OS_GRAPHENE = "GrapheneOS";

    static class DeviceInfo {
        final String name;
        final int attestationVersion;
        final int keymasterVersion;
        final boolean rollbackResistant;
        final boolean perUserEncryption;
        // enforce using StrongBox for new pairings
        final boolean enforceStrongBox;
        final String osName;

        DeviceInfo(final String name, final int attestationVersion, final int keymasterVersion,
                final boolean rollbackResistant, final boolean perUserEncryption,
                final boolean enforceStrongBox, final String osName) {
            this.name = name;
            this.attestationVersion = attestationVersion;
            this.keymasterVersion = keymasterVersion;
            this.rollbackResistant = rollbackResistant;
            this.perUserEncryption = perUserEncryption;
            this.enforceStrongBox = enforceStrongBox;
            this.osName = osName;
        }
    }

    private static final ImmutableSet<String> extraPatchLevelMissing = ImmutableSet.of(
            DEVICE_SM_A705FN,
            DEVICE_SM_G970F,
            DEVICE_SM_G975F,
            DEVICE_SM_N970F,
            DEVICE_SM_N970U,
            DEVICE_SM_N975U,
            DEVICE_SM_T510);

    private static final ImmutableMap<String, String> fingerprintsMigration = ImmutableMap
            .<String, String>builder()
            // GrapheneOS Pixel 3
            .put("0F9A9CC8ADE73064A54A35C5509E77994E3AA37B6FB889DD53AF82C3C570C5CF", // v2
                    "213AA4392BF7CABB9676C2680E134FB5FD3E5937D7E607B4EB907CB0A9D9E400") // v1
            // GrapheneOS Pixel 3 XL
            .put("06DD526EE9B1CB92AA19D9835B68B4FF1A48A3AD31D813F27C9A7D6C271E9451", // v2
                    "60D551860CC7FD32A9DC65FB3BCEB87A5E5C1F88928026F454A234D69B385580") // v1
            // Stock OS Pixel 3 and Pixel 3 XL
            .put("61FDA12B32ED84214A9CF13D1AFFB7AA80BD8A268A861ED4BB7A15170F1AB00C", // v2
                    "B799391AFAE3B35522D1EDC5C70A3746B097BDD1CABD59F72BB049705C7A03EF") // v1
            .build();

    static final ImmutableMap<String, DeviceInfo> fingerprintsCustomOS = ImmutableMap
            .<String, DeviceInfo>builder()
            .put("B094E48B27C6E15661223CEFF539CF35E481DEB4E3250331E973AC2C15CAD6CD",
                    new DeviceInfo(DEVICE_PIXEL_2, 2, 3, true, true, false, OS_GRAPHENE))
            .put("B6851E9B9C0EBB7185420BD0E79D20A84CB15AB0B018505EFFAA4A72B9D9DAC7",
                    new DeviceInfo(DEVICE_PIXEL_2_XL, 2, 3, true, true, false, OS_GRAPHENE))
            .put("213AA4392BF7CABB9676C2680E134FB5FD3E5937D7E607B4EB907CB0A9D9E400", // v1
                    new DeviceInfo(DEVICE_PIXEL_3, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("0F9A9CC8ADE73064A54A35C5509E77994E3AA37B6FB889DD53AF82C3C570C5CF", // v2
                    new DeviceInfo(DEVICE_PIXEL_3, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("60D551860CC7FD32A9DC65FB3BCEB87A5E5C1F88928026F454A234D69B385580", // v1
                    new DeviceInfo(DEVICE_PIXEL_3_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("06DD526EE9B1CB92AA19D9835B68B4FF1A48A3AD31D813F27C9A7D6C271E9451", // v2
                    new DeviceInfo(DEVICE_PIXEL_3_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("8FF8B9B4F831114963669E04EA4F849F33F3744686A0B33B833682746645ABC8",
                    new DeviceInfo(DEVICE_PIXEL_3A, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("91943FAA75DCB6392AE87DA18CA57D072BFFB80BC30F8FAFC7FFE13D76C5736E",
                    new DeviceInfo(DEVICE_PIXEL_3A_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("80EF268700EE42686F779A47B4A155FE1FFC2EEDF836B4803CAAB8FA61439746",
                    new DeviceInfo(DEVICE_PIXEL_4, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("3F15FDCB82847FED97427CE00563B8F9FF34627070DE5FDB17ACA7849AB98CC8",
                    new DeviceInfo(DEVICE_PIXEL_4_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("9F2454A1657B1B5AD7F2336B39A2611F7A40B2E0DDFD0D6553A359605928DF29",
                    new DeviceInfo(DEVICE_PIXEL_4a, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("DCEC2D053D3EC4F1C9BE414AA07E4D7D7CBD12040AD2F8831C994A83A0536866",
                    new DeviceInfo(DEVICE_PIXEL_4a_5G, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("36A99EAB7907E4FB12A70E3C41C456BCBE46C13413FBFE2436ADEE2B2B61120F",
                    new DeviceInfo(DEVICE_PIXEL_5, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("0ABDDEDA03B6CE10548C95E0BEA196FAA539866F929BCDF7ECA84B4203952514",
                    new DeviceInfo(DEVICE_PIXEL_5a, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("F0A890375D1405E62EBFD87E8D3F475F948EF031BBF9DDD516D5F600A23677E8",
                    new DeviceInfo(DEVICE_PIXEL_6, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("439B76524D94C40652CE1BF0D8243773C634D2F99BA3160D8D02AA5E29FF925C",
                    new DeviceInfo(DEVICE_PIXEL_6_PRO, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("08C860350A9600692D10C8512F7B8E80707757468E8FBFEEA2A870C0A83D6031",
                    new DeviceInfo(DEVICE_PIXEL_6A, 100, 100, false /* uses new API */, true, true, OS_GRAPHENE))
            .build();
    static final ImmutableMap<String, DeviceInfo> fingerprintsStock = ImmutableMap
            .<String, DeviceInfo>builder()
            .put("5341E6B2646979A70E57653007A1F310169421EC9BDD9F1A5648F75ADE005AF1",
                    new DeviceInfo(DEVICE_HUAWEI, 2, 3, false, true, false, OS_STOCK))
            .put("7E2E8CC82A77CA74554457E5DF3A3ED82E7032B3182D17FE17919BC6E989FF09",
                    new DeviceInfo(DEVICE_HUAWEI_HONOR_7A_PRO, 2, 3, false, true, false, OS_STOCK))
            .put("DFC2920C81E136FDD2A510478FDA137B262DC51D449EDD7D0BDB554745725CFE",
                    new DeviceInfo(DEVICE_NOKIA, 2, 3, true, true, false, OS_STOCK))
            .put("4D790FA0A5FE81D6B352B90AFE430684D9BC817518CD24C50E6343395F7C51F2",
                    new DeviceInfo(DEVICE_NOKIA_3_1, 2, 3, false, false, false, OS_STOCK))
            .put("893A17FD918235DB2865F7F6439EB0134A45B766AA452E0675BAC6CFB5A773AA",
                    new DeviceInfo(DEVICE_NOKIA_7_1, 2, 3, true, true, false, OS_STOCK))
            .put("6101853DFF451FAE5B137DF914D5E6C15C659337F2C405AC50B513A159071958",
                    new DeviceInfo(DEVICE_ONEPLUS_6_A6003, 2, 3, true, true, false, OS_STOCK))
            .put("1B90B7D1449D697FB2732A7D2DFA405D587254593F5137F7B6E64F7A0CE03BFD",
                    new DeviceInfo(DEVICE_ONEPLUS_6T_A6013, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("4B9201B11685BE6710E2B2BA8482F444E237E0C8A3D1F7F447FE29C37CECC559",
                    new DeviceInfo(DEVICE_ONEPLUS_7_PRO_GM1913, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("1962B0538579FFCE9AC9F507C46AFE3B92055BAC7146462283C85C500BE78D82",
                    new DeviceInfo(DEVICE_PIXEL_2, 2, 3, true, true, false, OS_STOCK))
            .put("171616EAEF26009FC46DC6D89F3D24217E926C81A67CE65D2E3A9DC27040C7AB",
                    new DeviceInfo(DEVICE_PIXEL_2_XL, 2, 3, true, true, false, OS_STOCK))
            .put("B799391AFAE3B35522D1EDC5C70A3746B097BDD1CABD59F72BB049705C7A03EF", // v1
                    new DeviceInfo(DEVICE_PIXEL_3_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("61FDA12B32ED84214A9CF13D1AFFB7AA80BD8A268A861ED4BB7A15170F1AB00C", // v2
                    new DeviceInfo(DEVICE_PIXEL_3_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("E75B86C52C7496255A95FB1E2B1C044BFA9D5FE34DD1E4EEBD752EEF0EA89875",
                    new DeviceInfo(DEVICE_PIXEL_3A_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("AE6316B4753C61F5855B95B9B98484AF784F2E83648D0FCC8107FCA752CAEA34",
                    new DeviceInfo(DEVICE_PIXEL_4_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("879CD3F18EA76E244D4D4AC3BCB9C337C13B4667190B19035AFE2536550050F1",
                    new DeviceInfo(DEVICE_PIXEL_4a, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("88265D85BA9E1E2F6036A259D880D2741031ACA445840137395B6D541C0FC7FC",
                    new DeviceInfo(DEVICE_PIXEL_5_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("1DD694CE00BF131AD61CEB576B7DCC41CF7F9B2C418F4C12B2B8F3E9A1EA911D",
                    new DeviceInfo(DEVICE_PIXEL_5a, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("0F6E75C80183B5DEC074B0054D4271E99389EBE4B136B0819DE1F150BA0FF9D7",
                    new DeviceInfo(DEVICE_PIXEL_6, 4, 41, false /* uses new API */, true, true, OS_STOCK))
            .put("42ED1BCA352FABD428F34E8FCEE62776F4CB2C66E06F82E5A59FF4495267BFC2",
                    new DeviceInfo(DEVICE_PIXEL_6_PRO, 4, 41, false /* uses new API */, true, true, OS_STOCK))
            .put("9AC4174153D45E4545B0F49E22FE63273999B6AC1CB6949C3A9F03EC8807EEE9",
                    new DeviceInfo(DEVICE_PIXEL_6A, 100, 100, false /* uses new API */, true, true, OS_STOCK))
            .put("72376CAACF11726D4922585732429FB97D0D1DD69F0D2E0770B9E61D14ADDE65",
                    new DeviceInfo(DEVICE_SM_A705FN, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("33D9484FD512E610BCF00C502827F3D55A415088F276C6506657215E622FA770",
                    new DeviceInfo(DEVICE_SM_G960F, 1, 2, false, false, false, OS_STOCK))
            .put("266869F7CF2FB56008EFC4BE8946C8F84190577F9CA688F59C72DD585E696488",
                    new DeviceInfo(DEVICE_SM_G960_NA, 1, 2, false, false, false, OS_STOCK))
            .put("12E8460A7BAF709F3B6CF41C7E5A37C6EB4D11CB36CF7F61F7793C8DCDC3C2E4",
                    new DeviceInfo(DEVICE_SM_G9600, 1, 2, false, false, false, OS_STOCK))
            .put("D1C53B7A931909EC37F1939B14621C6E4FD19BF9079D195F86B3CEA47CD1F92D",
                    new DeviceInfo(DEVICE_SM_G965F, 1, 2, false, false, false, OS_STOCK))
            .put("A4A544C2CFBAEAA88C12360C2E4B44C29722FC8DBB81392A6C1FAEDB7BF63010",
                    new DeviceInfo(DEVICE_SM_G965_MSM, 1, 2, false, false, false, OS_STOCK))
            .put("9D77474FA4FEA6F0B28636222FBCEE2BB1E6FF9856C736C85B8EA6E3467F2BBA",
                    new DeviceInfo(DEVICE_SM_G970F, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("08B2B5C6EC8F54C00C505756E1EF516BB4537B2F02D640410D287A43FCF92E3F",
                    new DeviceInfo(DEVICE_SM_G975F, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("F0FC0AF47D3FE4F27D79CF629AD6AC42AA1EEDE0A29C0AE109A91BBD1E7CD76D",
                    new DeviceInfo(DEVICE_SM_J260A, 1, 2, false, false, false, OS_STOCK))
            .put("410102030405060708090001020304050607080900010203040506070809005A",
                    new DeviceInfo(DEVICE_SM_J260F, 1, 2, false, false, false, OS_STOCK))
            .put("D6B902D9E77DFC0FB3627FFEFA6D05405932EBB3A6ED077874B5E2A0CCBDB632",
                    new DeviceInfo(DEVICE_SM_J260T1, 1, 2, false, false, false, OS_STOCK))
            .put("4558C1AFB30D1B46CB93F85462BC7D7FCF70B0103B9DBB0FE96DD828F43F29FC",
                    new DeviceInfo(DEVICE_SM_J337A, 1, 2, false, false, false, OS_STOCK))
            .put("45E3AB5D61A03915AE10BF0465B186CB5D9A2FB6A46BEFAA76E4483BBA5A358D",
                    new DeviceInfo(DEVICE_SM_J337T, 1, 2, false, false, false, OS_STOCK))
            .put("D95279A8F2E832FD68D919DBF33CFE159D5A1179686DB0BD2D7BBBF2382C4DD3",
                    new DeviceInfo(DEVICE_SM_J720F, 1, 2, false, false, false, OS_STOCK))
            .put("BB053A5F64D3E3F17C4611340FF2BBE2F605B832A9FA412B2C87F2A163ECE2FB",
                    new DeviceInfo(DEVICE_SM_J737T1, 1, 2, false, false, false, OS_STOCK))
            .put("4E0570011025D01386D057B2B382969F804DCD19E001344535CF0CFDB8AD7CFE",
                    new DeviceInfo(DEVICE_SM_M205F, 1, 2, false, false, false, OS_STOCK))
            .put("2A7E4954C9F703F3AC805AC660EA1727B981DB39B1E0F41E4013FA2586D3DF7F",
                    new DeviceInfo(DEVICE_SM_N960F, 1, 2, false, false, false, OS_STOCK))
            .put("173ACFA8AE9EDE7BBD998F45A49231F3A4BDDF0779345732E309446B46B5641B",
                    new DeviceInfo(DEVICE_SM_N960U, 1, 2, false, false, false, OS_STOCK))
            .put("E94BC43B97F98CD10C22CD9D8469DBE621116ECFA624FE291A1D53CF3CD685D1",
                    new DeviceInfo(DEVICE_SM_N970F, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("466011C44BBF883DB38CF96617ED35C796CE2552C5357F9230258329E943DB70",
                    new DeviceInfo(DEVICE_SM_N970U, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("52946676088007755EB586B3E3F3E8D3821BE5DF73513E6C13640507976420E6",
                    new DeviceInfo(DEVICE_SM_N975U, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("F3688C02D9676DEDB6909CADE364C271901FD66EA4F691AEB8B8921195E469C5",
                    new DeviceInfo(DEVICE_SM_S367VL, 1, 2, false, false, false, OS_STOCK))
            .put("106592D051E54388C6E601DFD61D59EB1674A8B93216C65C5B3E1830B73D3B82",
                    new DeviceInfo(DEVICE_SM_T510, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("87790149AED63553B768456AAB6DAAD5678CD87BDEB2BF3649467085349C34E0",
                    new DeviceInfo(DEVICE_SM_T835, 1, 2, false, false, false, OS_STOCK))
            .put("4285AD64745CC79B4499817F264DC16BF2AF5163AF6C328964F39E61EC84693E",
                    new DeviceInfo(DEVICE_SONY_XPERIA_XA2, 2, 3, true, true, false, OS_STOCK))
            .put("54A9F21E9CFAD3A2D028517EF333A658302417DB7FB75E0A109A019646CC5F39",
                    new DeviceInfo(DEVICE_SONY_XPERIA_XZ1, 2, 3, true, true, false, OS_STOCK))
            .put("BC3B5E121974113939B8A2FE758F9B923F1D195F038D2FD1C04929F886E83BB5",
                    new DeviceInfo(DEVICE_SONY_XPERIA_XZ2, 2, 3, false, true, false, OS_STOCK))
            .put("94B8B4E3260B4BF8211A02CF2F3DE257A127CFFB2E4047D5580A752A5E253DE0",
                    new DeviceInfo(DEVICE_SONY_XPERIA_XZ2_COMPACT, 2, 3, true, true, false, OS_STOCK))
            .put("728800FEBB119ADD74519618AFEDB715E1C39FE08A4DE37D249BF54ACF1CE00F",
                    new DeviceInfo(DEVICE_BLACKBERRY_KEY2, 2, 3, true, true, false, OS_STOCK))
            .put("1194659B40EA291245E54A3C4EC4AA5B7077BD244D65C7DD8C0A2DBB9DB1FB35",
                    new DeviceInfo(DEVICE_BQ_AQUARIS_X2_PRO, 2, 3, true, false, false, OS_STOCK))
            .put("A9C6758D509600D0EB94FA8D2BF6EE7A6A6097F0CCEF94A755DDE065AA1AA1B0",
                    new DeviceInfo(DEVICE_XIAOMI_MI_A2, 2, 3, true, false, false, OS_STOCK))
            .put("6FA710B639848C9D47378937A1AFB1B6A52DDA738BEB6657E2AE70A15B40541A",
                    new DeviceInfo(DEVICE_XIAOMI_MI_A2_LITE, 2, 3, true, false, false, OS_STOCK))
            .put("84BC8445A29B5444A2D1629C9774C8626DAFF3574D865EC5067A78FAEC96B013",
                    new DeviceInfo(DEVICE_XIAOMI_MI_9, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("1CC39488D2F85DEE0A8E0903CDC4124CFDF2BE2531ED6060B678057ED2CB89B4",
                    new DeviceInfo(DEVICE_HTC, 2, 3, true, false, false, OS_STOCK))
            .put("80BAB060807CFFA45D4747DF1AD706FEE3AE3F645F80CF14871DDBE27E14C30B",
                    new DeviceInfo(DEVICE_MOTO_G7, 3, 4, false /* uses new API */, true, false, OS_STOCK))
            .put("C2224571C9CD5C89200A7311B1E37AA9CF751E2E19753E8D3702BCA00BE1D42C",
                    new DeviceInfo(DEVICE_MOTOROLA_ONE_VISION, 2, 3, false, true, false, OS_STOCK))
            .put("1F6D98D1B0E1F1CE1C872BD36C668F9DFDBE0D47594789E1540DF4E6198F657D",
                    new DeviceInfo(DEVICE_VIVO_1807, 2, 3, true, false, false, OS_STOCK))
            .put("C55635636999E9D0A0588D24402256B7F9F3AEE07B4F7E4E003F09FF0190AFAE",
                    new DeviceInfo(DEVICE_REVVL_2, 2, 3, false, false, false, OS_STOCK))
            .put("341C50D577DC5F3D5B46E8BFA22C22D1E5FC7D86D4D860E70B89222A7CBFC893",
                    new DeviceInfo(DEVICE_OPPO_CPH1831, 2, 3, true, false, false, OS_STOCK))
            .put("41BF0A26BB3AFDCCCC40F7B685083522EB5BF1C492F0EC4847F351265313CB07",
                    new DeviceInfo(DEVICE_OPPO_CPH1903, 2, 3, true, false, false, OS_STOCK))
            .put("7E19E217072BE6CB7A4C6F673FD3FB62DC51B3E204E7475838747947A3920DD8",
                    new DeviceInfo(DEVICE_OPPO_CPH1909, 2, 3, false, false, false, OS_STOCK))
            .put("0D5F986943D0CE0D4F9783C27EEBE175BE359927DB8B6546B667279A81133C3C",
                    new DeviceInfo(DEVICE_LG_Q710AL, 2, 3, false, false, false, OS_STOCK))
            .put("D20078F2AF2A7D3ECA3064018CB8BD47FBCA6EE61ABB41BA909D3C529CB802F4",
                    new DeviceInfo(DEVICE_LM_Q720, 3, 4, false /* uses new API */, false, false, OS_STOCK))
            .put("54EC644C21FD8229E3B0066513337A8E2C8EF3098A3F974B6A1CFE456A683DAE",
                    new DeviceInfo(DEVICE_RMX1941, 2, 3, false, true, false, OS_STOCK))
            .build();

    static final ImmutableMap<String, DeviceInfo> fingerprintsStrongBoxCustomOS = ImmutableMap
            .<String, DeviceInfo>builder()
            // GrapheneOS
            .put("0F9A9CC8ADE73064A54A35C5509E77994E3AA37B6FB889DD53AF82C3C570C5CF",
                    new DeviceInfo(DEVICE_PIXEL_3, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("06DD526EE9B1CB92AA19D9835B68B4FF1A48A3AD31D813F27C9A7D6C271E9451",
                    new DeviceInfo(DEVICE_PIXEL_3_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("73D6C63A07610404FE16A4E07DD24E41A70D331E9D3EF7BBA2D087E4761EB63A",
                    new DeviceInfo(DEVICE_PIXEL_3A, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("3F36E3482E1FF82986576552CB4FD08AF09F8B09D3832314341E04C42D2919A4",
                    new DeviceInfo(DEVICE_PIXEL_3A_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("80EF268700EE42686F779A47B4A155FE1FFC2EEDF836B4803CAAB8FA61439746",
                    new DeviceInfo(DEVICE_PIXEL_4, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("3F15FDCB82847FED97427CE00563B8F9FF34627070DE5FDB17ACA7849AB98CC8",
                    new DeviceInfo(DEVICE_PIXEL_4_XL, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("9F2454A1657B1B5AD7F2336B39A2611F7A40B2E0DDFD0D6553A359605928DF29",
                    new DeviceInfo(DEVICE_PIXEL_4a, 3, 4, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("DCEC2D053D3EC4F1C9BE414AA07E4D7D7CBD12040AD2F8831C994A83A0536866",
                    new DeviceInfo(DEVICE_PIXEL_4a_5G, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("36A99EAB7907E4FB12A70E3C41C456BCBE46C13413FBFE2436ADEE2B2B61120F",
                    new DeviceInfo(DEVICE_PIXEL_5, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("0ABDDEDA03B6CE10548C95E0BEA196FAA539866F929BCDF7ECA84B4203952514",
                    new DeviceInfo(DEVICE_PIXEL_5a, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("F0A890375D1405E62EBFD87E8D3F475F948EF031BBF9DDD516D5F600A23677E8",
                    new DeviceInfo(DEVICE_PIXEL_6, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("439B76524D94C40652CE1BF0D8243773C634D2F99BA3160D8D02AA5E29FF925C",
                    new DeviceInfo(DEVICE_PIXEL_6_PRO, 4, 41, false /* uses new API */, true, true, OS_GRAPHENE))
            .put("08C860350A9600692D10C8512F7B8E80707757468E8FBFEEA2A870C0A83D6031",
                    new DeviceInfo(DEVICE_PIXEL_6A, 100, 100, false /* uses new API */, true, true, OS_GRAPHENE))
            .build();
    static final ImmutableMap<String, DeviceInfo> fingerprintsStrongBoxStock = ImmutableMap
            .<String, DeviceInfo>builder()
            .put("61FDA12B32ED84214A9CF13D1AFFB7AA80BD8A268A861ED4BB7A15170F1AB00C",
                    new DeviceInfo(DEVICE_PIXEL_3_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("8CA89AF1A6DAA74B00810849356DE929CFC4498EF36AF964757BDE8A113BF46D",
                    new DeviceInfo(DEVICE_PIXEL_3A_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("AE6316B4753C61F5855B95B9B98484AF784F2E83648D0FCC8107FCA752CAEA34",
                    new DeviceInfo(DEVICE_PIXEL_4_GENERIC, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("879CD3F18EA76E244D4D4AC3BCB9C337C13B4667190B19035AFE2536550050F1",
                    new DeviceInfo(DEVICE_PIXEL_4a, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("88265D85BA9E1E2F6036A259D880D2741031ACA445840137395B6D541C0FC7FC",
                    new DeviceInfo(DEVICE_PIXEL_5_GENERIC, 4, 41, false /* uses new API */, true, true, OS_STOCK))
            .put("1DD694CE00BF131AD61CEB576B7DCC41CF7F9B2C418F4C12B2B8F3E9A1EA911D",
                    new DeviceInfo(DEVICE_PIXEL_5a, 4, 41, false /* uses new API */, true, true, OS_STOCK))
            .put("0F6E75C80183B5DEC074B0054D4271E99389EBE4B136B0819DE1F150BA0FF9D7",
                    new DeviceInfo(DEVICE_PIXEL_6, 4, 41, false /* uses new API */, true, true, OS_STOCK))
            .put("42ED1BCA352FABD428F34E8FCEE62776F4CB2C66E06F82E5A59FF4495267BFC2",
                    new DeviceInfo(DEVICE_PIXEL_6_PRO, 4, 41, false /* uses new API */, true, true, OS_STOCK))
            .put("9AC4174153D45E4545B0F49E22FE63273999B6AC1CB6949C3A9F03EC8807EEE9",
                    new DeviceInfo(DEVICE_PIXEL_6A, 100, 100, false /* uses new API */, true, true, OS_STOCK))
            .put("3D3DEB132A89551D0A700D230BABAE4E3E80E3C7926ACDD7BAEDF9B57AD316D0",
                    new DeviceInfo(DEVICE_SM_N970U, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .put("9AC63842137D92C119A1B1BE2C9270B9EBB6083BBE6350B7823571942B5869F0",
                    new DeviceInfo(DEVICE_SM_N975U, 3, 4, false /* uses new API */, true, true, OS_STOCK))
            .build();

    static final String GOOGLE_ROOT_CERTIFICATE_0 =
            "-----BEGIN CERTIFICATE-----\n" +
            "MIIFYDCCA0igAwIBAgIJAOj6GWMU0voYMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV" +
            "BAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMTYwNTI2MTYyODUyWhcNMjYwNTI0MTYy" +
            "ODUyWjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0B" +
            "AQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gvMsd/dTEDDJdS" +
            "Sxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7" +
            "tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggj" +
            "nar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGq" +
            "C4FSYa04T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQ" +
            "oVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+O" +
            "JtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvmag8jfPioyKvxnK/Eg" +
            "sTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504LzSRi" +
            "igHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+M" +
            "RPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9E" +
            "aDK8Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5Um" +
            "AGMCAwEAAaOBpjCBozAdBgNVHQ4EFgQUNmHhAHyIBQlRi0RsR/8aTMnqTxIwHwYD" +
            "VR0jBBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnqTxIwDwYDVR0TAQH/BAUwAwEB/zAO" +
            "BgNVHQ8BAf8EBAMCAYYwQAYDVR0fBDkwNzA1oDOgMYYvaHR0cHM6Ly9hbmRyb2lk" +
            "Lmdvb2dsZWFwaXMuY29tL2F0dGVzdGF0aW9uL2NybC8wDQYJKoZIhvcNAQELBQAD" +
            "ggIBACDIw41L3KlXG0aMiS//cqrG+EShHUGo8HNsw30W1kJtjn6UBwRM6jnmiwfB" +
            "Pb8VA91chb2vssAtX2zbTvqBJ9+LBPGCdw/E53Rbf86qhxKaiAHOjpvAy5Y3m00m" +
            "qC0w/Zwvju1twb4vhLaJ5NkUJYsUS7rmJKHHBnETLi8GFqiEsqTWpG/6ibYCv7rY" +
            "DBJDcR9W62BW9jfIoBQcxUCUJouMPH25lLNcDc1ssqvC2v7iUgI9LeoM1sNovqPm" +
            "QUiG9rHli1vXxzCyaMTjwftkJLkf6724DFhuKug2jITV0QkXvaJWF4nUaHOTNA4u" +
            "JU9WDvZLI1j83A+/xnAJUucIv/zGJ1AMH2boHqF8CY16LpsYgBt6tKxxWH00XcyD" +
            "CdW2KlBCeqbQPcsFmWyWugxdcekhYsAWyoSf818NUsZdBWBaR/OukXrNLfkQ79Iy" +
            "ZohZbvabO/X+MVT3rriAoKc8oE2Uws6DF+60PV7/WIPjNvXySdqspImSN78mflxD" +
            "qwLqRBYkA3I75qppLGG9rp7UCdRjxMl8ZDBld+7yvHVgt1cVzJx9xnyGCC23Uaic" +
            "MDSXYrB4I4WHXPGjxhZuCuPBLTdOLU8YRvMYdEvYebWHMpvwGCF6bAx3JBpIeOQ1" +
            "wDB5y0USicV3YgYGmi+NZfhA4URSh77Yd6uuJOJENRaNVTzk\n" +
            "-----END CERTIFICATE-----";

    static final String GOOGLE_ROOT_CERTIFICATE_1 =
            "-----BEGIN CERTIFICATE-----\n" +
            "MIIFHDCCAwSgAwIBAgIJANUP8luj8tazMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV" +
            "BAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMTkxMTIyMjAzNzU4WhcNMzQxMTE4MjAz" +
            "NzU4WjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0B" +
            "AQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gvMsd/dTEDDJdS" +
            "Sxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7" +
            "tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggj" +
            "nar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGq" +
            "C4FSYa04T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQ" +
            "oVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+O" +
            "JtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvmag8jfPioyKvxnK/Eg" +
            "sTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504LzSRi" +
            "igHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+M" +
            "RPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9E" +
            "aDK8Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5Um" +
            "AGMCAwEAAaNjMGEwHQYDVR0OBBYEFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMB8GA1Ud" +
            "IwQYMBaAFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMA8GA1UdEwEB/wQFMAMBAf8wDgYD" +
            "VR0PAQH/BAQDAgIEMA0GCSqGSIb3DQEBCwUAA4ICAQBOMaBc8oumXb2voc7XCWnu" +
            "XKhBBK3e2KMGz39t7lA3XXRe2ZLLAkLM5y3J7tURkf5a1SutfdOyXAmeE6SRo83U" +
            "h6WszodmMkxK5GM4JGrnt4pBisu5igXEydaW7qq2CdC6DOGjG+mEkN8/TA6p3cno" +
            "L/sPyz6evdjLlSeJ8rFBH6xWyIZCbrcpYEJzXaUOEaxxXxgYz5/cTiVKN2M1G2ok" +
            "QBUIYSY6bjEL4aUN5cfo7ogP3UvliEo3Eo0YgwuzR2v0KR6C1cZqZJSTnghIC/vA" +
            "D32KdNQ+c3N+vl2OTsUVMC1GiWkngNx1OO1+kXW+YTnnTUOtOIswUP/Vqd5SYgAI" +
            "mMAfY8U9/iIgkQj6T2W6FsScy94IN9fFhE1UtzmLoBIuUFsVXJMTz+Jucth+IqoW" +
            "Fua9v1R93/k98p41pjtFX+H8DslVgfP097vju4KDlqN64xV1grw3ZLl4CiOe/A91" +
            "oeLm2UHOq6wn3esB4r2EIQKb6jTVGu5sYCcdWpXr0AUVqcABPdgL+H7qJguBw09o" +
            "jm6xNIrw2OocrDKsudk/okr/AwqEyPKw9WnMlQgLIKw1rODG2NvU9oR3GVGdMkUB" +
            "ZutL8VuFkERQGt6vQ2OCw0sV47VMkuYbacK/xyZFiRcrPJPb41zgbQj9XAEyLKCH" +
            "ex0SdDrx+tWUDqG8At2JHA==\n" +
            "-----END CERTIFICATE-----";

    static final String GOOGLE_ROOT_CERTIFICATE_2 =
            "-----BEGIN CERTIFICATE-----\n" +
            "MIIFHDCCAwSgAwIBAgIJAMNrfES5rhgxMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\n" +
            "BAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMjExMTE3MjMxMDQyWhcNMzYxMTEzMjMx\n" +
            "MDQyWjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0B\n" +
            "AQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gvMsd/dTEDDJdS\n" +
            "Sxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7\n" +
            "tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggj\n" +
            "nar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGq\n" +
            "C4FSYa04T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQ\n" +
            "oVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+O\n" +
            "JtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvmag8jfPioyKvxnK/Eg\n" +
            "sTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504LzSRi\n" +
            "igHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+M\n" +
            "RPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9E\n" +
            "aDK8Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5Um\n" +
            "AGMCAwEAAaNjMGEwHQYDVR0OBBYEFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMB8GA1Ud\n" +
            "IwQYMBaAFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMA8GA1UdEwEB/wQFMAMBAf8wDgYD\n" +
            "VR0PAQH/BAQDAgIEMA0GCSqGSIb3DQEBCwUAA4ICAQBTNNZe5cuf8oiq+jV0itTG\n" +
            "zWVhSTjOBEk2FQvh11J3o3lna0o7rd8RFHnN00q4hi6TapFhh4qaw/iG6Xg+xOan\n" +
            "63niLWIC5GOPFgPeYXM9+nBb3zZzC8ABypYuCusWCmt6Tn3+Pjbz3MTVhRGXuT/T\n" +
            "QH4KGFY4PhvzAyXwdjTOCXID+aHud4RLcSySr0Fq/L+R8TWalvM1wJJPhyRjqRCJ\n" +
            "erGtfBagiALzvhnmY7U1qFcS0NCnKjoO7oFedKdWlZz0YAfu3aGCJd4KHT0MsGiL\n" +
            "Zez9WP81xYSrKMNEsDK+zK5fVzw6jA7cxmpXcARTnmAuGUeI7VVDhDzKeVOctf3a\n" +
            "0qQLwC+d0+xrETZ4r2fRGNw2YEs2W8Qj6oDcfPvq9JySe7pJ6wcHnl5EZ0lwc4xH\n" +
            "7Y4Dx9RA1JlfooLMw3tOdJZH0enxPXaydfAD3YifeZpFaUzicHeLzVJLt9dvGB0b\n" +
            "HQLE4+EqKFgOZv2EoP686DQqbVS1u+9k0p2xbMA105TBIk7npraa8VM0fnrRKi7w\n" +
            "lZKwdH+aNAyhbXRW9xsnODJ+g8eF452zvbiKKngEKirK5LGieoXBX7tZ9D1GNBH2\n" +
            "Ob3bKOwwIWdEFle/YF/h6zWgdeoaNGDqVBrLr2+0DtWoiB1aDEjLWl9FmyIUyUm7\n" +
            "mD/vFDkzF+wm7cyWpQpCVQ==\n" +
            "-----END CERTIFICATE-----";

    static final byte[] DEFLATE_DICTIONARY_2 = BaseEncoding.base64().decode(
            "MIIFHDCCAwSgAwIBAgIJANUP8luj8tazMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAUTEGY5MjAw" +
            "OWU4NTNiNmIwNDUwHhcNMTkxMTIyMjAzNzU4WhcNMzQxMTE4MjAzNzU4WjAbMRkwFwYDVQQFExBm" +
            "OTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHs" +
            "K7Qui8xUFmOr75gvMsd/dTEDDJdSSxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfd" +
            "nJLmN0pTy/4lj4/7tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL" +
            "/ggjnar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGqC4FSYa04" +
            "T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQoVJYnFPlXTcHYvASLu+R" +
            "hhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+OJtvsBslHZvPBKCOdT0MS+tgSOIfga+z1" +
            "Z1g7+DVagf7quvmag8jfPioyKvxnK/EgsTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgp" +
            "Zrt3i5MIlCaY504LzSRiigHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6" +
            "tUXHI/+MRPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9EaDK8" +
            "Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5UmAGMCAwEAAaNjMGEw" +
            "HQYDVR0OBBYEFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMB8GA1UdIwQYMBaAFDZh4QB8iAUJUYtEbEf/" +
            "GkzJ6k8SMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgIEMA0GCSqGSIb3DQEBCwUAA4IC" +
            "AQBOMaBc8oumXb2voc7XCWnuXKhBBK3e2KMGz39t7lA3XXRe2ZLLAkLM5y3J7tURkf5a1SutfdOy" +
            "XAmeE6SRo83Uh6WszodmMkxK5GM4JGrnt4pBisu5igXEydaW7qq2CdC6DOGjG+mEkN8/TA6p3cno" +
            "L/sPyz6evdjLlSeJ8rFBH6xWyIZCbrcpYEJzXaUOEaxxXxgYz5/cTiVKN2M1G2okQBUIYSY6bjEL" +
            "4aUN5cfo7ogP3UvliEo3Eo0YgwuzR2v0KR6C1cZqZJSTnghIC/vAD32KdNQ+c3N+vl2OTsUVMC1G" +
            "iWkngNx1OO1+kXW+YTnnTUOtOIswUP/Vqd5SYgAImMAfY8U9/iIgkQj6T2W6FsScy94IN9fFhE1U" +
            "tzmLoBIuUFsVXJMTz+Jucth+IqoWFua9v1R93/k98p41pjtFX+H8DslVgfP097vju4KDlqN64xV1" +
            "grw3ZLl4CiOe/A91oeLm2UHOq6wn3esB4r2EIQKb6jTVGu5sYCcdWpXr0AUVqcABPdgL+H7qJguB" +
            "w09ojm6xNIrw2OocrDKsudk/okr/AwqEyPKw9WnMlQgLIKw1rODG2NvU9oR3GVGdMkUBZutL8VuF" +
            "kERQGt6vQ2OCw0sV47VMkuYbacK/xyZFiRcrPJPb41zgbQj9XAEyLKCHex0SdDrx+tWUDqG8At2J" +
            "HDCCAn0wggIkoAMCAQICAQEwCgYIKoZIzj0EAwIwKTEZMBcGA1UEBRMQODk1NDFlODhjZDFlODk5" +
            "ZTEMMAoGA1UEDAwDVEVFMCAXDTcwMDEwMTAwMDAwMFoYDzIxMDYwMjA3MDYyODE1WjAfMR0wGwYD" +
            "VQQDDBRBbmRyb2lkIEtleXN0b3JlIEtleTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABPi4iyfz" +
            "dnHcSuNMU7WjjVYjXAtbq2ZE5nzH91IaPYyzWkXu6ZLxWsMJYyqArhWp6hwNmnOKlINiHk7bRRbc" +
            "ZEijggFDMIIBPzAOBgNVHQ8BAf8EBAMCB4AwggErBgorBgEEAdZ5AgERBIIBGzCCARcCAQMKAQEC" +
            "AQQKAQEEBnNhbXBsZQQAMFi/hT0IAgYBctLeJ5C/hUVIBEYwRDEeMBwEF2FwcC5hdHRlc3RhdGlv" +
            "bi5hdWRpdG9yAgESMSIEIJkOBPCGSxnxT4Tg5DL3o5Pyl6sQWiLB4bELRCpKYsQsMIGkoQgxBgIB" +
            "AgIBA6IDAgEDowQCAgEApQUxAwIBBKoDAgEBv4N3AgUAv4U+AwIBAL+FQEwwSgQgrmMWtHU8YfWF" +
            "W5W5uYSEr3hPLoNkjQ/MgQf8p1LK6jQBAf8KAQAEIK/qYXG8ogb7WcN+paqs8yqj4nMBJBZyFrjs" +
            "NV+luDVAv4VBBQIDAYagv4VCBQIDAxUWv4VOBgIEATQ8nb+FTwYCBAE0PJ0wCgYIKoZIzj0EAwID" +
            "RwAwRAIgUgL1oRkxu8Y1cYZ/yuAhB2k9xp0vm12xMGC+zdanoIQCIBjdi941dC9bX6F8lZTlu5Wc" +
            "R4eGk5kH8x9tadf8iJV1MIICJTCCAaugAwIBAgIKEkh3djdpCZJ2CTAKBggqhkjOPQQDAjApMRkw" +
            "FwYDVQQFExA1NDQ5ZDJjZGI2Yjg5NmU2MQwwCgYDVQQMDANURUUwHhcNMTkwNjEzMTg1NDUyWhcN" +
            "MjkwNjEwMTg1NDUyWjApMRkwFwYDVQQFExA4OTU0MWU4OGNkMWU4OTllMQwwCgYDVQQMDANURUUw" +
            "WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARok9fwvbGel87DkDJL/3cp97ACmyMa5S181sQOfJqz" +
            "8VbwpR2H1OyiSZZieU3nVA/U9OdhKLWRTg/GUMLRJzExo4G6MIG3MB0GA1UdDgQWBBRjaCAA6DrB" +
            "1wdRs/n79bm6l7wASjAfBgNVHSMEGDAWgBQjl9W34CQ+E3ekx90ztaY3xoTBZTAPBgNVHRMBAf8E" +
            "BTADAQH/MA4GA1UdDwEB/wQEAwICBDBUBgNVHR8ETTBLMEmgR6BFhkNodHRwczovL2FuZHJvaWQu" +
            "Z29vZ2xlYXBpcy5jb20vYXR0ZXN0YXRpb24vY3JsLzEyNDg3Nzc2Mzc2OTA5OTI3NjA5MAoGCCqG" +
            "SM49BAMCA2gAMGUCMQC7qqSq/oZni+0N9AYmvcS9/AcRQ6RFHbrBeMTwg2owqLTqHFPwLGjaTmHO" +
            "mAiXD2YCMDBkslEd2F/YDpOko77Hfx8O+y0VYT9W79PS8/0Ou6vjFqpdR+S5aN+rmlNe3T3IWzCC" +
            "A9EwggG5oAMCAQICCgOIJmdgZYmWhd4wDQYJKoZIhvcNAQELBQAwGzEZMBcGA1UEBRMQZjkyMDA5" +
            "ZTg1M2I2YjA0NTAeFw0xOTA2MTMxODQ0MzRaFw0yOTA2MTAxODQ0MzRaMCkxGTAXBgNVBAUTEDU0" +
            "NDlkMmNkYjZiODk2ZTYxDDAKBgNVBAwMA1RFRTB2MBAGByqGSM49AgEGBSuBBAAiA2IABK2up6iM" +
            "2ezqUsxyBjewbF9+QGfDQR4BA4A02aTft2jL8ff1cDbQmCUP3KPpMofJ28ueQ5d4GdgcZo8apPot" +
            "hF+mKLeyMhHACkct2TJgoIs3ma3OFAIy5dp0kBUEWdvvW6OBtjCBszAdBgNVHQ4EFgQUI5fVt+Ak" +
            "PhN3pMfdM7WmN8aEwWUwHwYDVR0jBBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnqTxIwDwYDVR0TAQH/" +
            "BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAgQwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cHM6Ly9hbmRyb2lk" +
            "Lmdvb2dsZWFwaXMuY29tL2F0dGVzdGF0aW9uL2NybC9FOEZBMTk2MzE0RDJGQTE4MA0GCSqGSIb3" +
            "DQEBCwUAA4ICAQAH1AFNh+Jmddw1fVKG/IAFsYjRC8TKYizbofBVu7WIk2xdAQRktVS084oTCywv" +
            "61RpEVsuuKXigAEDos6alZw3fv+Neo4916UYZeLb5AKyEHS+eeMnWSqEOnQ0GPi+eCsF/2eJhlhP" +
            "ZbadvaaOCiuhQ6YC6qof0iSYpqzHCUe71vVATYWbg9x4qPDKy/EyH6UO+XcmdVjuFG95cZ7+Mpj9" +
            "RnZRpZCriAOt8DsvtbgrPUES0ZG0XFuVKPI23Smal2o0vJWvpNx/r5SGtugufSz36jeLW45zNtrz" +
            "s9GySPizqhOveKRsEkupasa26V4betFQEEO8fWUc4+e9+JKdN3zKoVgLKhmtDESdQ6HTvo/MyXhJ" +
            "xKiBeUYELLdi1j8U5BhfUXKhI2EU77+BotGG1/CJcL3zAXm3NMkGZuE0WI0PVWhmQ3k9mln+UmV0" +
            "/AA1L6WjBx4B2Np+LZYYdx8zPIdleX8kFwOIPfxxzL2CNfG88lBHKOKkhboBeEGgt8/rMVRj5g2I" +
            "3tLkxgcSy6KmkT7rC1+yCV8gdHaw2YZFuWaXSY//S9n0g8FsmS78CZocL1Vq5Uw01qKqKlcgRhC5" +
            "bRb4Uu0nXxKUilhRv9vDAQOJlPyk88e7cn0vIxZ7eWnqN3YvFJf2U3z1ZxBdxNNNITvbXMAL5G8s" +
            "Cur17q+iiwTVnDCCBWAwggNIoAMCAQICCQDo+hljFNL6GDANBgkqhkiG9w0BAQsFADAbMRkwFwYD" +
            "VQQFExBmOTIwMDllODUzYjZiMDQ1MB4XDTE2MDUyNjE2Mjg1MloXDTI2MDUyNDE2Mjg1MlowGzEZ" +
            "MBcGA1UEBRMQZjkyMDA5ZTg1M2I2YjA0NTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB" +
            "AK+2x4IrsacB7Cu0LovMVBZjq++YLzLHf3UxAwyXUksbX+gJ+8cqqUUfdDy9mm8TNXRKpV539ras" +
            "NTXuF8JeY5UX3ZyS5jdKU8v+JY+P+7b9EpN4oipMqZxFLUelnzIB9EGXyhzNfnYvsvUxUbb+sv/9" +
            "K2/k/lvGvZ7DS/4II52q/OuOtajtKzrNnF46d5DhtRRCeTFZhZgRrZ6yqWu916V8k6kcQfzNJ9Z/" +
            "1vZxqguBUmGtOE+jeUSGRgTds9jE+SChmxZWwvFK1tA8VuwGCJkEHB7Rpf5tNEC1VrrR0KFSWJxT" +
            "5V03B2LwEi7vkYYbGw5sTICSdJnA6b7AuD47wfk8csBJYEu9LxNF5iw/jibb7AbJR2bzwSgjnU9D" +
            "EvrYEjiH4Gvs9WdYO/g1WoH+6rr5moPI3z4qMir8ZyvxILE1FYtoIc6vMJtu7nf5iDOwGNqhDkUf" +
            "BqN01QeB81kIKWa7d4uTCJQmmOdOC80kYooBwswD5R8LPltKweTfnq+f9qSSp3wUg4gohQFbQizm" +
            "e4C4jJtI4TtgerVFxyP/jET48tNoufZSDTEUXr+ehirXHfajv9JFCVnWU3QNl6EvNosT72bV0KVK" +
            "bi9dmm/vRGgyvGeERyWGHwk90ObzQF2olkPvD01ptkIAUf25MElnPjaVBYDTzfT70IvFhIOVJgBj" +
            "AgMBAAGjgaYwgaMwHQYDVR0OBBYEFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMB8GA1UdIwQYMBaAFDZh" +
            "4QB8iAUJUYtEbEf/GkzJ6k8SMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMEAGA1Ud" +
            "HwQ5MDcwNaAzoDGGL2h0dHBzOi8vYW5kcm9pZC5nb29nbGVhcGlzLmNvbS9hdHRlc3RhdGlvbi9j" +
            "cmwvMA0GCSqGSIb3DQEBCwUAA4ICAQAgyMONS9ypVxtGjIkv/3KqxvhEoR1BqPBzbMN9FtZCbY5+" +
            "lAcETOo55osHwT2/FQPdXIW9r7LALV9s2076gSffiwTxgncPxOd0W3/OqocSmogBzo6bwMuWN5tN" +
            "JqgtMP2cL47tbcG+L4S2ieTZFCWLFEu65iShxwZxEy4vBhaohLKk1qRv+om2Ar+62AwSQ3EfVutg" +
            "VvY3yKAUHMVAlCaLjDx9uZSzXA3NbLKrwtr+4lICPS3qDNbDaL6j5kFIhvax5Ytb18cwsmjE48H7" +
            "ZCS5H+u9uAxYbiroNoyE1dEJF72iVheJ1GhzkzQOLiVPVg72SyNY/NwPv8ZwCVLnCL/8xidQDB9m" +
            "6B6hfAmNei6bGIAberSscVh9NF3MgwnVtipQQnqm0D3LBZlslroMXXHpIWLAFsqEn/NfDVLGXQVg" +
            "WkfzrpF6zS35EO/SMmaIWW72mzv1/jFU9664gKCnPKBNlMLOgxfutD1e/1iD4zb18knarKSJkje/" +
            "Jn5cQ6sC6kQWJANyO+aqaSxhva6e1AnUY8TJfGQwZXfu8rx1YLdXFcycfcZ8hggtt1GonDA0l2Kw" +
            "eCOFh1zxo8YWbgrjwS03Ti1PGEbzGHRL2Hm1hzKb8BghemwMdyQaSHjkNcAwectFEonFd2IGBpov" +
            "jWX4QOFEUoe+2HerriTiRDUWjVU85DCCAoAwggIloAMCAQICAQEwDAYIKoZIzj0EAwIFADAvMRkw" +
            "FwYDVQQFExA5MGU4ZGEzY2FkZmM3ODIwMRIwEAYDVQQMDAlTdHJvbmdCb3gwHhcNNzAwMTAxMDAw" +
            "MDAwWhcNMjgwNTIzMjM1OTU5WjAfMR0wGwYDVQQDDBRBbmRyb2lkIEtleXN0b3JlIEtleTBZMBMG" +
            "ByqGSM49AgEGCCqGSM49AwEHA0IABEyVpiDDKdlmqbFM8Rzx1V6fpBhxRIzwPffcMwWMRcdlDFSG" +
            "+srvJbbpDhKuSYo+U6HUXr16tIw0RmsyZ0wFyq2jggE+MIIBOjAOBgNVHQ8BAf8EBAMCB4AwggEm" +
            "BgorBgEEAdZ5AgERBIIBFjCCARICAQMKAQICAQQKAQIEBnNhbXBsZQQAMFi/hT0IAgYBctLeJC6/" +
            "hUVIBEYwRDEeMBwEF2FwcC5hdHRlc3RhdGlvbi5hdWRpdG9yAgESMSIEIJkOBPCGSxnxT4Tg5DL3" +
            "o5Pyl6sQWiLB4bELRCpKYsQsMIGfoQgxBgIBAgIBA6IDAgEDowQCAgEApQUxAwIBBL+DdwIFAL+F" +
            "PgMCAQC/hUBMMEoEIK5jFrR1PGH1hVuVubmEhK94Ty6DZI0PzIEH/KdSyuo0AQH/CgEABCCv6mFx" +
            "vKIG+1nDfqWqrPMqo+JzASQWcha47DVfpbg1QL+FQQUCAwGGoL+FQgUCAwMVFr+FTgYCBAE0PJ2/" +
            "hU8GAgQBNDydMAwGCCqGSM49BAMCBQADRwAwRAIgbh9FEvaUwa77PJWGezTE+YO9aVL5UkGAi6wi" +
            "Xeow29gCIAxewxB18lrVWsyn5oStewTMoaplxHVgdcILHwT2PkP8MIICMDCCAbegAwIBAgIKESM4" +
            "JDRACGgBcTAKBggqhkjOPQQDAjAvMRkwFwYDVQQFExBjY2QxOGI5YjYwOGQ2NThlMRIwEAYDVQQM" +
            "DAlTdHJvbmdCb3gwHhcNMTgwNTI1MjMyODUwWhcNMjgwNTIyMjMyODUwWjAvMRkwFwYDVQQFExA5" +
            "MGU4ZGEzY2FkZmM3ODIwMRIwEAYDVQQMDAlTdHJvbmdCb3gwWTATBgcqhkjOPQIBBggqhkjOPQMB" +
            "BwNCAATkV0TCsZ+vcIoXK0BLe4q4sQ1veBPE228LqldQCQPCb6IBCpM7rHDgKmsaviWtsA0anJyU" +
            "pXHTVix0mdIy9Xcno4G6MIG3MB0GA1UdDgQWBBRvsbUxnba4hRW+z8AMdxqP51TqljAfBgNVHSME" +
            "GDAWgBS8W8vVecaU3BmPm59nU8zr5mLf3jAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIC" +
            "BDBUBgNVHR8ETTBLMEmgR6BFhkNodHRwczovL2FuZHJvaWQuZ29vZ2xlYXBpcy5jb20vYXR0ZXN0" +
            "YXRpb24vY3JsLzExMjMzODI0MzQ0MDA4NjgwMTcxMAoGCCqGSM49BAMCA2cAMGQCMFBzxlbrGJar" +
            "X+e8d7UfD5M2Br3QxKUFAS1tfGxy9Lw72yfFn8v3jxNyCamglqpw8gIwYkzbZDvx/uU6vXIaB1y0" +
            "PRGq5Jp5xIgKqUEJvsBuyMN8JdJsfzvHbkYyZUujU/SVMIID1zCCAb+gAwIBAgIKA4gmZ2BliZaF" +
            "mDANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MB4XDTE4MDYyMDIy" +
            "MTQwMloXDTI4MDYxNzIyMTQwMlowLzEZMBcGA1UEBRMQY2NkMThiOWI2MDhkNjU4ZTESMBAGA1UE" +
            "DAwJU3Ryb25nQm94MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEhO8/KkOtlIwEItY5zds+E2p/WG0w" +
            "Net8fDHsooCiZi0MMzJZMGTlepRhYbnCBQlSi7TXjTzQQ8kAJmJFeHTlp7hBcpccDbCyicyvX5Jj" +
            "azVOiB3hwKzS0oKwSS9D3sUfo4G2MIGzMB0GA1UdDgQWBBS8W8vVecaU3BmPm59nU8zr5mLf3jAf" +
            "BgNVHSMEGDAWgBQ2YeEAfIgFCVGLRGxH/xpMyepPEjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB" +
            "/wQEAwICBDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwczovL2FuZHJvaWQuZ29vZ2xlYXBpcy5jb20v" +
            "YXR0ZXN0YXRpb24vY3JsLzhGNjczNEM5RkE1MDQ3ODkwDQYJKoZIhvcNAQELBQADggIBAJOSNuBk" +
            "Qfic/SZf++OB6bXkbHmJpZaHxU/yVtnOZBrhAa4cLKIDg9A9A3nWtLw68x8VfI1s442+qHWfxGvV" +
            "idhaCsLT+F2dpUme5VsgJSAK/6ZTLb5vhwskzS6G8YPUM/NzeFif7tkMu9cHkHlCFwJePPVWBg0i" +
            "z51PFphdJGOG3e3CsRHG37Lk5RlvrVt3R5toRDrK5QV5V1RQ6OadRxHBxmmRC2owao8fU5yYkZ42" +
            "bznwkyqCc0WsHmpqI0D/6jPaszAE7HlGPLMtGo/rVEaRjrjg9huEJMAHIsQAxhUDfZwAZ6tE4jEV" +
            "f52o3AezZsvzDErcwWPB6ekUMBG9zuNLipcEhLKG9X4V0tJN+vwqvUWrzen9ZzvSoN6p5rQNjPFN" +
            "vVtq0rVzPoPHjF6wN9r2qsQA8MVY31b3maOVq9n+WVOXxaZXtMmIKi8EgZAejeaq2ewAuxYaXoHs" +
            "LI/9GPtF0k4mCbN6dffMwh/RJ8IWfZ3stwbyzcJ+sIrQ9IWX/Wsdi4vo3ZgRhf85pbGYM8SFYhnj" +
            "UAbiyBHPYb0wltu+zwXMKXSuSCVhq3BnuTHS6sEkK5u9QBFY+U4AnP74MJ0tjP9S4YXm5/neTcE1" +
            "6yAdZlYY/8qZZoiukXl4TZTqlZA7/H5sdSx9ps+w/izJRS6CrFa72mB/tPtCd3jbMxVgMIIFYDCC" +
            "A0igAwIBAgIJAOj6GWMU0voYMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAUTEGY5MjAwOWU4NTNi" +
            "NmIwNDUwHhcNMTYwNTI2MTYyODUyWhcNMjYwNTI0MTYyODUyWjAbMRkwFwYDVQQFExBmOTIwMDll" +
            "ODUzYjZiMDQ1MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xU" +
            "FmOr75gvMsd/dTEDDJdSSxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pT" +
            "y/4lj4/7tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggjnar8" +
            "6461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGqC4FSYa04T6N5RIZG" +
            "BN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQoVJYnFPlXTcHYvASLu+RhhsbDmxM" +
            "gJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+OJtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVa" +
            "gf7quvmag8jfPioyKvxnK/EgsTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MI" +
            "lCaY504LzSRiigHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+M" +
            "RPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9EaDK8Z4RHJYYf" +
            "CT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5UmAGMCAwEAAaOBpjCBozAdBgNV" +
            "HQ4EFgQUNmHhAHyIBQlRi0RsR/8aTMnqTxIwHwYDVR0jBBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnq" +
            "TxIwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwQAYDVR0fBDkwNzA1oDOgMYYvaHR0" +
            "cHM6Ly9hbmRyb2lkLmdvb2dsZWFwaXMuY29tL2F0dGVzdGF0aW9uL2NybC8wDQYJKoZIhvcNAQEL" +
            "BQADggIBACDIw41L3KlXG0aMiS//cqrG+EShHUGo8HNsw30W1kJtjn6UBwRM6jnmiwfBPb8VA91c" +
            "hb2vssAtX2zbTvqBJ9+LBPGCdw/E53Rbf86qhxKaiAHOjpvAy5Y3m00mqC0w/Zwvju1twb4vhLaJ" +
            "5NkUJYsUS7rmJKHHBnETLi8GFqiEsqTWpG/6ibYCv7rYDBJDcR9W62BW9jfIoBQcxUCUJouMPH25" +
            "lLNcDc1ssqvC2v7iUgI9LeoM1sNovqPmQUiG9rHli1vXxzCyaMTjwftkJLkf6724DFhuKug2jITV" +
            "0QkXvaJWF4nUaHOTNA4uJU9WDvZLI1j83A+/xnAJUucIv/zGJ1AMH2boHqF8CY16LpsYgBt6tKxx" +
            "WH00XcyDCdW2KlBCeqbQPcsFmWyWugxdcekhYsAWyoSf818NUsZdBWBaR/OukXrNLfkQ79IyZohZ" +
            "bvabO/X+MVT3rriAoKc8oE2Uws6DF+60PV7/WIPjNvXySdqspImSN78mflxDqwLqRBYkA3I75qpp" +
            "LGG9rp7UCdRjxMl8ZDBld+7yvHVgt1cVzJx9xnyGCC23UaicMDSXYrB4I4WHXPGjxhZuCuPBLTdO" +
            "LU8YRvMYdEvYebWHMpvwGCF6bAx3JBpIeOQ1wDB5y0USicV3YgYGmi+NZfhA4URSh77Yd6uuJOJE" +
            "NRaNVTzk");

    static final byte[] DEFLATE_DICTIONARY_3 = BaseEncoding.base64().decode(
            "MIICjDCCAjKgAwIBAgIBATAKBggqhkjOPQQDAjA5MQwwCgYDVQQMDANURUUxKTAnBgNVBAUTIDcw" +
            "YzI5ODU2MGQ4ZTJlYmJjM2ViZTM5YmQ3NDc4ZDRjMB4XDTcwMDEwMTAwMDAwMFoXDTQ4MDEwMTAw" +
            "MDAwMFowHzEdMBsGA1UEAxMUQW5kcm9pZCBLZXlzdG9yZSBLZXkwWTATBgcqhkjOPQIBBggqhkjO" +
            "PQMBBwNCAAQR+vduzii4Rre8TkK312HzdLXxjojSCDXRUg9CISx7QjzBTvpmmsgZ5NCptZ0pX8um" +
            "erf8H+xrrhL8R3y3QvUyo4IBQzCCAT8wDgYDVR0PAQH/BAQDAgeAMIIBKwYKKwYBBAHWeQIBEQSC" +
            "ARswggEXAgFkCgEBAgFkCgEBBAZzYW1wbGUEADBYv4U9CAIGAYDUNZXsv4VFSARGMEQxHjAcBBdh" +
            "cHAuYXR0ZXN0YXRpb24uYXVkaXRvcgIBLTEiBCCZDgTwhksZ8U+E4OQy96OT8perEFoiweGxC0Qq" +
            "SmLELDCBpKEIMQYCAQICAQOiAwIBA6MEAgIBAKUFMQMCAQSqAwIBAb+DdwIFAL+FPgMCAQC/hUBM" +
            "MEoEIELtG8o1L6vUKPNOj87mJ3b0yyxm4G+C5aWf9ElSZ7/CAQH/CgEABCC429249di4yi84SAUE" +
            "Jgb66JPihAI1gN+i3fludSP7hL+FQQUCAwHUwL+FQgUCAwMV3b+FTgYCBAE0ilm/hU8GAgQBNIpZ" +
            "MAoGCCqGSM49BAMCA0gAMEUCIQDOefOPPwRmvyae6Yk/E4z0/7VKRyVH6mh+6ZPk84bTBAIgCDxG" +
            "2cHci7acvPave6jFDMt5GRpU4WG1SuZnBbEfr1AwggHzMIIBeaADAgECAhA2hGTduqmjwDgBYazT" +
            "lSM0MAoGCCqGSM49BAMCMDkxDDAKBgNVBAwMA1RFRTEpMCcGA1UEBRMgNjc1YWVjN2E1NGM2OGU2" +
            "OGQwYmE0NmFmNTEyNDA0Y2QwHhcNMjEwNjE2MTkyOTI1WhcNMzEwNjE0MTkyOTI1WjA5MQwwCgYD" +
            "VQQMDANURUUxKTAnBgNVBAUTIDcwYzI5ODU2MGQ4ZTJlYmJjM2ViZTM5YmQ3NDc4ZDRjMFkwEwYH" +
            "KoZIzj0CAQYIKoZIzj0DAQcDQgAE9YsRA4TFgKyrsfU/E6KLM//JmqlDkrNDYpaP4wWlhSYdj50u" +
            "l21Cpn/uZfnCGKfB2olQoh4JbmpEbCme8Qa0KKNjMGEwHQYDVR0OBBYEFDAdCdqtRzSa0UFGTKNT" +
            "tXhF4kf+MB8GA1UdIwQYMBaAFDWn45Sw/6LZ1/InF8v4DqKov7llMA8GA1UdEwEB/wQFMAMBAf8w" +
            "DgYDVR0PAQH/BAQDAgIEMAoGCCqGSM49BAMCA2gAMGUCMD2WXL3HxD/AXlnIJo51auU4uC9Doj98" +
            "CYiXETLlh9ozef12S2I+o0U8244OJs0cgwIxAPcxtphsqBhObadWxaVAYb306lvwm/jL9DTKMa0k" +
            "l+M1/K7/RX64DtHFe4yWROo8pDCCA5IwggF6oAMCAQICDzYJEYsncbLF0o/lrT3oGTANBgkqhkiG" +
            "9w0BAQsFADAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MB4XDTIxMDYxNjE5MjYwNVoXDTMx" +
            "MDYxNDE5MjYwNVowOTEMMAoGA1UEDAwDVEVFMSkwJwYDVQQFEyA2NzVhZWM3YTU0YzY4ZTY4ZDBi" +
            "YTQ2YWY1MTI0MDRjZDB2MBAGByqGSM49AgEGBSuBBAAiA2IABDGgLsZFRKXnIe7LqIDTvjaBjUTr" +
            "iSL3oLGOTHbSBRCYS24A5niCMZOJZ19HoKwk2T5tVRqqcDO272MdjoTLG++Eqs2qxN2eVjHMnBjZ" +
            "gahjtDhMzVQ/rzbzFr4lLEyhVqNjMGEwHQYDVR0OBBYEFDWn45Sw/6LZ1/InF8v4DqKov7llMB8G" +
            "A1UdIwQYMBaAFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/" +
            "BAQDAgIEMA0GCSqGSIb3DQEBCwUAA4ICAQCVeIl+75h5QjQ44hXXk3dEdLmezLUquGpYyV0JSoMI" +
            "9Cxh5YBdWAijvsn/bVtZ2Aj2Qg+IwnGsAQCTTuB+if0HGK+H3Dzp1Y3O2MtVZZ3xYBZkBDMhTzJY" +
            "/t/wYAa/DgYKkvqYKBCvhUvAuBDNHVy5WYnF8IDsNrAm6C58HAiPWEi0VfLxqWb/E3+HBuMLVIeo" +
            "8jAunQAN+SJP8EJcp0aQyZOXRfrsCw1daVWbrS0QK6TpksT+OUZdU9FmQDQRL97aYBEX6frBpEkc" +
            "IbmlnIGVT/BTv0ClW7/fXRkL9+o1ltk3bpGR2bf7N3uLdfmQeQ5+KHdDnnjaExJHfDu6b3Qc1PKg" +
            "XIEXqr/5rxivVFOc+aXOKw8CAN61hzp6AWdpf0EaAH+ZZwpmL7nzrXicLj/wGbRREsOzNxPjfhPO" +
            "JvRrWXhEzuHpp4RrotdBKoI7tPeGOGeo2Q1exfeVTONGukCiiGFjmP+hRCsv2YXMCS/xVoYAlxGs" +
            "FL6O96+c/usWUf4+HqbjHxha+FTD9Q5Jez+KRBc7vLju9sRTy4TioTqVFxMQOxAkJsRqtN1La9zx" +
            "fNFILSqR4rXsmmFgqt4zxYzVjMiaB8BwyqqZEkHUIoudalz29vjRTj5TLz4U9dM807g+St9Xu0/g" +
            "Ql4ZutcprWAKrLG+QPFeIDDLtUzaP0YCcTCCBRwwggMEoAMCAQICCQDVD/Jbo/LWszANBgkqhkiG" +
            "9w0BAQsFADAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MB4XDTE5MTEyMjIwMzc1OFoXDTM0" +
            "MTExODIwMzc1OFowGzEZMBcGA1UEBRMQZjkyMDA5ZTg1M2I2YjA0NTCCAiIwDQYJKoZIhvcNAQEB" +
            "BQADggIPADCCAgoCggIBAK+2x4IrsacB7Cu0LovMVBZjq++YLzLHf3UxAwyXUksbX+gJ+8cqqUUf" +
            "dDy9mm8TNXRKpV539rasNTXuF8JeY5UX3ZyS5jdKU8v+JY+P+7b9EpN4oipMqZxFLUelnzIB9EGX" +
            "yhzNfnYvsvUxUbb+sv/9K2/k/lvGvZ7DS/4II52q/OuOtajtKzrNnF46d5DhtRRCeTFZhZgRrZ6y" +
            "qWu916V8k6kcQfzNJ9Z/1vZxqguBUmGtOE+jeUSGRgTds9jE+SChmxZWwvFK1tA8VuwGCJkEHB7R" +
            "pf5tNEC1VrrR0KFSWJxT5V03B2LwEi7vkYYbGw5sTICSdJnA6b7AuD47wfk8csBJYEu9LxNF5iw/" +
            "jibb7AbJR2bzwSgjnU9DEvrYEjiH4Gvs9WdYO/g1WoH+6rr5moPI3z4qMir8ZyvxILE1FYtoIc6v" +
            "MJtu7nf5iDOwGNqhDkUfBqN01QeB81kIKWa7d4uTCJQmmOdOC80kYooBwswD5R8LPltKweTfnq+f" +
            "9qSSp3wUg4gohQFbQizme4C4jJtI4TtgerVFxyP/jET48tNoufZSDTEUXr+ehirXHfajv9JFCVnW" +
            "U3QNl6EvNosT72bV0KVKbi9dmm/vRGgyvGeERyWGHwk90ObzQF2olkPvD01ptkIAUf25MElnPjaV" +
            "BYDTzfT70IvFhIOVJgBjAgMBAAGjYzBhMB0GA1UdDgQWBBQ2YeEAfIgFCVGLRGxH/xpMyepPEjAf" +
            "BgNVHSMEGDAWgBQ2YeEAfIgFCVGLRGxH/xpMyepPEjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB" +
            "/wQEAwICBDANBgkqhkiG9w0BAQsFAAOCAgEATjGgXPKLpl29r6HO1wlp7lyoQQSt3tijBs9/be5Q" +
            "N110XtmSywJCzOctye7VEZH+WtUrrX3TslwJnhOkkaPN1IelrM6HZjJMSuRjOCRq57eKQYrLuYoF" +
            "xMnWlu6qtgnQugzhoxvphJDfP0wOqd3J6C/7D8s+nr3Yy5UnifKxQR+sVsiGQm63KWBCc12lDhGs" +
            "cV8YGM+f3E4lSjdjNRtqJEAVCGEmOm4xC+GlDeXH6O6ID91L5YhKNxKNGIMLs0dr9CkegtXGamSU" +
            "k54ISAv7wA99inTUPnNzfr5djk7FFTAtRolpJ4DcdTjtfpF1vmE5501DrTiLMFD/1aneUmIACJjA" +
            "H2PFPf4iIJEI+k9luhbEnMveCDfXxYRNVLc5i6ASLlBbFVyTE8/ibnLYfiKqFhbmvb9Ufd/5PfKe" +
            "NaY7RV/h/A7JVYHz9Pe747uCg5ajeuMVdYK8N2S5eAojnvwPdaHi5tlBzqusJ93rAeK9hCECm+o0" +
            "1RrubGAnHVqV69AFFanAAT3YC/h+6iYLgcNPaI5usTSK8NjqHKwyrLnZP6JK/wMKhMjysPVpzJUI" +
            "CyCsNazgxtjb1PaEdxlRnTJFAWbrS/FbhZBEUBrer0NjgsNLFeO1TJLmG2nCv8cmRYkXKzyT2+Nc" +
            "4G0I/VwBMiygh3sdEnQ68frVlA6hvALdiRwwggKTMIICOKADAgECAgEBMAoGCCqGSM49BAMCMD8x" +
            "EjAQBgNVBAwMCVN0cm9uZ0JveDEpMCcGA1UEBRMgMDY4NDJmODRiY2JhZGJkMTk2NDA1YmZkNmE2" +
            "MzQ5ZWIwHhcNNzAwMTAxMDAwMDAwWhcNNDgwMTAxMDAwMDAwWjAfMR0wGwYDVQQDExRBbmRyb2lk" +
            "IEtleXN0b3JlIEtleTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAfABHBc7XL5BV3J/Hkze7UV" +
            "cIRkFIhcA/IxdTV/7BBu6Cs8cgozBmvQEunKzM5ZtImcK9vgaL6AQ2LQa6ap1sCjggFDMIIBPzAO" +
            "BgNVHQ8BAf8EBAMCB4AwggErBgorBgEEAdZ5AgERBIIBGzCCARcCAWQKAQICAWQKAQIEBnNhbXBs" +
            "ZQQAMFi/hT0IAgYBgNQ1lgm/hUVIBEYwRDEeMBwEF2FwcC5hdHRlc3RhdGlvbi5hdWRpdG9yAgEt" +
            "MSIEIJkOBPCGSxnxT4Tg5DL3o5Pyl6sQWiLB4bELRCpKYsQsMIGkoQgxBgIBAgIBA6IDAgEDowQC" +
            "AgEApQUxAwIBBKoDAgEBv4N3AgUAv4U+AwIBAL+FQEwwSgQgQu0byjUvq9Qo806PzuYndvTLLGbg" +
            "b4LlpZ/0SVJnv8IBAf8KAQAEILjb3bj12LjKLzhIBQQmBvrok+KEAjWA36Ld+W51I/uEv4VBBQID" +
            "AdTAv4VCBQIDAxXdv4VOBgIEATSKWb+FTwYCBAE0iYwwCgYIKoZIzj0EAwIDSQAwRgIhAO00LfcM" +
            "727wXgViuN5U8vYy1m9MhdEd57B6I9spUyFXAiEApspeMT/JcDkwdxVz8k0w/+nZWdqfYwObcvNX" +
            "DSq5ypUwggIAMIIBhaADAgECAhBWmiQBupI4MJvawAbCrCUdMAoGCCqGSM49BAMCMD8xEjAQBgNV" +
            "BAwMCVN0cm9uZ0JveDEpMCcGA1UEBRMgZjNkZjE5N2IxNDFjOTM0N2M3ZGFmMDM3NWVjMGY5NDkw" +
            "HhcNMjAwOTExMTgwMjQ0WhcNMzAwOTA5MTgwMjQ0WjA/MRIwEAYDVQQMDAlTdHJvbmdCb3gxKTAn" +
            "BgNVBAUTIDA2ODQyZjg0YmNiYWRiZDE5NjQwNWJmZDZhNjM0OWViMFkwEwYHKoZIzj0CAQYIKoZI" +
            "zj0DAQcDQgAEOZia8nnk9EBkAHEXRYvGoytNVgVk8FuoOiZEAASGE5NlM3HyvFow9dU+loti+c1Q" +
            "Tmlf81Lk0GxKUjyI5HD+m6NjMGEwHQYDVR0OBBYEFFEkbrAxxxK2bsYszFiQtN4bviNJMB8GA1Ud" +
            "IwQYMBaAFG7mEd9wRtW7NG2NLY4GNx9ScatNMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD" +
            "AgIEMAoGCCqGSM49BAMCA2kAMGYCMQDu31qlKc4TpaANNZGaRuvOzBmuY42JB9XooqY5Q2QHtLP1" +
            "mR3o3CVPkAm6rYWejYcCMQC6Xc4xUvZeNcqoChEdekLdeqDWwEYB94Gr7WJPRbqEE2MakeP2uX2Z" +
            "CrA7qzkqb2MwggOZMIIBgaADAgECAhAGDYlr3GCldqWUe+CJX1mJMA0GCSqGSIb3DQEBCwUAMBsx" +
            "GTAXBgNVBAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMjAwOTExMTgwMjIxWhcNMzAwOTA5MTgwMjIx" +
            "WjA/MRIwEAYDVQQMDAlTdHJvbmdCb3gxKTAnBgNVBAUTIGYzZGYxOTdiMTQxYzkzNDdjN2RhZjAz" +
            "NzVlYzBmOTQ5MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEckZgaAUEeiAHGRiWVk3cKTHg3jSqYPvY" +
            "uE7GtUTvciqEO4/udo8qYR19wXhTiXNv8XMU9n9+weZIT8NLAehJPcDFDCr2DTHH+bWn9pY9WrxF" +
            "yja6FKCycsxsbPbxXqNjo2MwYTAdBgNVHQ4EFgQUbuYR33BG1bs0bY0tjgY3H1Jxq00wHwYDVR0j" +
            "BBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnqTxIwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC" +
            "AgQwDQYJKoZIhvcNAQELBQADggIBADgo2AZj5dmw30GAPndP/+ROXJqw3psGfJqNVpzc72m9iAtq" +
            "u6yFPLPzF9u2KjdYTLnjzhCJYqFdtVMYWO31d4fR2sd7Z1gEquhjFYawjQ11je2sDW4zHzShaG8S" +
            "4XG8BAdX/9Qd3RhAJW5eMNBM/wV2vyfx5g8F3l/FCiX6lZjRSNs+Cl/c/PkqQkESnlqKOgu6uUA0" +
            "vXV3Wlfx+i0IIuGHT9ACuYVsDFM5CsIhEj7bJfQPUPBrN5atktIP+E+QzX+4SaV4TjlcRRfLYwt2" +
            "LG0SIjrLL4D/BAyLMyhWFW5dVRlmIMsc+01OPFCzllcPIPLGklrRflZyRu22pG4SB3qIxZWGExq1" +
            "9Xt7yNea3vYEnNJlY4B/aFTZd6zqggaMVqHoAgVwyiop8HMKWsRuSIRL6otJe4GMM2QjeNdxTvvk" +
            "4j9D6ArX3IO3NH7CXW4/yK8adGLFNz3qv+LgDBPKKKO9ZbpBBwoDBMlKeIPktLlX+MHmaXqhfbp8" +
            "WFC15E8CwtdB8PXVp2SHuy6q5YvdlXUY1If7z2tsa07XBKX3xwedS7fR1dLEcEA8r43dLuzPxhoz" +
            "UIGlvh5QKPoBJHoev9TFb0YSdqMurYo9h/wyobQQKDFB/08MEGROdl8UxGzj8U21pS7XR06OPuW0" +
            "R+tLSseOBgTKSsz1aY5GWRST02yhMIIFYDCCA0igAwIBAgIJAOj6GWMU0voYMA0GCSqGSIb3DQEB" +
            "CwUAMBsxGTAXBgNVBAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMTYwNTI2MTYyODUyWhcNMjYwNTI0" +
            "MTYyODUyWjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0BAQEFAAOC" +
            "Ag8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gvMsd/dTEDDJdSSxtf6An7xyqpRR90PL2a" +
            "bxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+" +
            "di+y9TFRtv6y//0rb+T+W8a9nsNL/ggjnar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73X" +
            "pXyTqRxB/M0n1n/W9nGqC4FSYa04T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00" +
            "QLVWutHQoVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+OJtvs" +
            "BslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvmag8jfPioyKvxnK/EgsTUVi2ghzq8wm27u" +
            "d/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504LzSRiigHCzAPlHws+W0rB5N+er5/2pJKn" +
            "fBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+MRPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2X" +
            "oS82ixPvZtXQpUpuL12ab+9EaDK8Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN" +
            "9PvQi8WEg5UmAGMCAwEAAaOBpjCBozAdBgNVHQ4EFgQUNmHhAHyIBQlRi0RsR/8aTMnqTxIwHwYD" +
            "VR0jBBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnqTxIwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E" +
            "BAMCAYYwQAYDVR0fBDkwNzA1oDOgMYYvaHR0cHM6Ly9hbmRyb2lkLmdvb2dsZWFwaXMuY29tL2F0" +
            "dGVzdGF0aW9uL2NybC8wDQYJKoZIhvcNAQELBQADggIBACDIw41L3KlXG0aMiS//cqrG+EShHUGo" +
            "8HNsw30W1kJtjn6UBwRM6jnmiwfBPb8VA91chb2vssAtX2zbTvqBJ9+LBPGCdw/E53Rbf86qhxKa" +
            "iAHOjpvAy5Y3m00mqC0w/Zwvju1twb4vhLaJ5NkUJYsUS7rmJKHHBnETLi8GFqiEsqTWpG/6ibYC" +
            "v7rYDBJDcR9W62BW9jfIoBQcxUCUJouMPH25lLNcDc1ssqvC2v7iUgI9LeoM1sNovqPmQUiG9rHl" +
            "i1vXxzCyaMTjwftkJLkf6724DFhuKug2jITV0QkXvaJWF4nUaHOTNA4uJU9WDvZLI1j83A+/xnAJ" +
            "UucIv/zGJ1AMH2boHqF8CY16LpsYgBt6tKxxWH00XcyDCdW2KlBCeqbQPcsFmWyWugxdcekhYsAW" +
            "yoSf818NUsZdBWBaR/OukXrNLfkQ79IyZohZbvabO/X+MVT3rriAoKc8oE2Uws6DF+60PV7/WIPj" +
            "NvXySdqspImSN78mflxDqwLqRBYkA3I75qppLGG9rp7UCdRjxMl8ZDBld+7yvHVgt1cVzJx9xnyG" +
            "CC23UaicMDSXYrB4I4WHXPGjxhZuCuPBLTdOLU8YRvMYdEvYebWHMpvwGCF6bAx3JBpIeOQ1wDB5" +
            "y0USicV3YgYGmi+NZfhA4URSh77Yd6uuJOJENRaNVTzkMIIFYDCCA0igAwIBAgIJAOj6GWMU0voY" +
            "MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMTYwNTI2MTYy" +
            "ODUyWhcNMjYwNTI0MTYyODUyWjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MIICIjANBgkq" +
            "hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gvMsd/dTEDDJdSSxtf" +
            "6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7tv0Sk3iiKkypnEUt" +
            "R6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggjnar86461qO0rOs2cXjp3kOG1FEJ5" +
            "MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGqC4FSYa04T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW" +
            "7AYImQQcHtGl/m00QLVWutHQoVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElg" +
            "S70vE0XmLD+OJtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvmag8jfPioyKvxnK/Eg" +
            "sTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504LzSRiigHCzAPlHws+" +
            "W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+MRPjy02i59lINMRRev56GKtcd" +
            "9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9EaDK8Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR" +
            "/bkwSWc+NpUFgNPN9PvQi8WEg5UmAGMCAwEAAaOBpjCBozAdBgNVHQ4EFgQUNmHhAHyIBQlRi0Rs" +
            "R/8aTMnqTxIwHwYDVR0jBBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnqTxIwDwYDVR0TAQH/BAUwAwEB" +
            "/zAOBgNVHQ8BAf8EBAMCAYYwQAYDVR0fBDkwNzA1oDOgMYYvaHR0cHM6Ly9hbmRyb2lkLmdvb2ds" +
            "ZWFwaXMuY29tL2F0dGVzdGF0aW9uL2NybC8wDQYJKoZIhvcNAQELBQADggIBACDIw41L3KlXG0aM" +
            "iS//cqrG+EShHUGo8HNsw30W1kJtjn6UBwRM6jnmiwfBPb8VA91chb2vssAtX2zbTvqBJ9+LBPGC" +
            "dw/E53Rbf86qhxKaiAHOjpvAy5Y3m00mqC0w/Zwvju1twb4vhLaJ5NkUJYsUS7rmJKHHBnETLi8G" +
            "FqiEsqTWpG/6ibYCv7rYDBJDcR9W62BW9jfIoBQcxUCUJouMPH25lLNcDc1ssqvC2v7iUgI9LeoM" +
            "1sNovqPmQUiG9rHli1vXxzCyaMTjwftkJLkf6724DFhuKug2jITV0QkXvaJWF4nUaHOTNA4uJU9W" +
            "DvZLI1j83A+/xnAJUucIv/zGJ1AMH2boHqF8CY16LpsYgBt6tKxxWH00XcyDCdW2KlBCeqbQPcsF" +
            "mWyWugxdcekhYsAWyoSf818NUsZdBWBaR/OukXrNLfkQ79IyZohZbvabO/X+MVT3rriAoKc8oE2U" +
            "ws6DF+60PV7/WIPjNvXySdqspImSN78mflxDqwLqRBYkA3I75qppLGG9rp7UCdRjxMl8ZDBld+7y" +
            "vHVgt1cVzJx9xnyGCC23UaicMDSXYrB4I4WHXPGjxhZuCuPBLTdOLU8YRvMYdEvYebWHMpvwGCF6" +
            "bAx3JBpIeOQ1wDB5y0USicV3YgYGmi+NZfhA4URSh77Yd6uuJOJENRaNVTzkMIIFHDCCAwSgAwIB" +
            "AgIJANUP8luj8tazMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAUTEGY5MjAwOWU4NTNiNmIwNDUw" +
            "HhcNMTkxMTIyMjAzNzU4WhcNMzQxMTE4MjAzNzU4WjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZi" +
            "MDQ1MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gv" +
            "Msd/dTEDDJdSSxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7" +
            "tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggjnar86461qO0r" +
            "Os2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGqC4FSYa04T6N5RIZGBN2z2MT5" +
            "IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQoVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDp" +
            "vsC4PjvB+TxywElgS70vE0XmLD+OJtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvma" +
            "g8jfPioyKvxnK/EgsTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504L" +
            "zSRiigHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+MRPjy02i5" +
            "9lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9EaDK8Z4RHJYYfCT3Q5vNA" +
            "XaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5UmAGMCAwEAAaNjMGEwHQYDVR0OBBYEFDZh" +
            "4QB8iAUJUYtEbEf/GkzJ6k8SMB8GA1UdIwQYMBaAFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMA8GA1Ud" +
            "EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgIEMA0GCSqGSIb3DQEBCwUAA4ICAQBOMaBc8oumXb2v" +
            "oc7XCWnuXKhBBK3e2KMGz39t7lA3XXRe2ZLLAkLM5y3J7tURkf5a1SutfdOyXAmeE6SRo83Uh6Ws" +
            "zodmMkxK5GM4JGrnt4pBisu5igXEydaW7qq2CdC6DOGjG+mEkN8/TA6p3cnoL/sPyz6evdjLlSeJ" +
            "8rFBH6xWyIZCbrcpYEJzXaUOEaxxXxgYz5/cTiVKN2M1G2okQBUIYSY6bjEL4aUN5cfo7ogP3Uvl" +
            "iEo3Eo0YgwuzR2v0KR6C1cZqZJSTnghIC/vAD32KdNQ+c3N+vl2OTsUVMC1GiWkngNx1OO1+kXW+" +
            "YTnnTUOtOIswUP/Vqd5SYgAImMAfY8U9/iIgkQj6T2W6FsScy94IN9fFhE1UtzmLoBIuUFsVXJMT" +
            "z+Jucth+IqoWFua9v1R93/k98p41pjtFX+H8DslVgfP097vju4KDlqN64xV1grw3ZLl4CiOe/A91" +
            "oeLm2UHOq6wn3esB4r2EIQKb6jTVGu5sYCcdWpXr0AUVqcABPdgL+H7qJguBw09ojm6xNIrw2Ooc" +
            "rDKsudk/okr/AwqEyPKw9WnMlQgLIKw1rODG2NvU9oR3GVGdMkUBZutL8VuFkERQGt6vQ2OCw0sV" +
            "47VMkuYbacK/xyZFiRcrPJPb41zgbQj9XAEyLKCHex0SdDrx+tWUDqG8At2JHDCCBRwwggMEoAMC" +
            "AQICCQDDa3xEua4YMTANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1" +
            "MB4XDTIxMTExNzIzMTA0MloXDTM2MTExMzIzMTA0MlowGzEZMBcGA1UEBRMQZjkyMDA5ZTg1M2I2" +
            "YjA0NTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK+2x4IrsacB7Cu0LovMVBZjq++Y" +
            "LzLHf3UxAwyXUksbX+gJ+8cqqUUfdDy9mm8TNXRKpV539rasNTXuF8JeY5UX3ZyS5jdKU8v+JY+P" +
            "+7b9EpN4oipMqZxFLUelnzIB9EGXyhzNfnYvsvUxUbb+sv/9K2/k/lvGvZ7DS/4II52q/OuOtajt" +
            "KzrNnF46d5DhtRRCeTFZhZgRrZ6yqWu916V8k6kcQfzNJ9Z/1vZxqguBUmGtOE+jeUSGRgTds9jE" +
            "+SChmxZWwvFK1tA8VuwGCJkEHB7Rpf5tNEC1VrrR0KFSWJxT5V03B2LwEi7vkYYbGw5sTICSdJnA" +
            "6b7AuD47wfk8csBJYEu9LxNF5iw/jibb7AbJR2bzwSgjnU9DEvrYEjiH4Gvs9WdYO/g1WoH+6rr5" +
            "moPI3z4qMir8ZyvxILE1FYtoIc6vMJtu7nf5iDOwGNqhDkUfBqN01QeB81kIKWa7d4uTCJQmmOdO" +
            "C80kYooBwswD5R8LPltKweTfnq+f9qSSp3wUg4gohQFbQizme4C4jJtI4TtgerVFxyP/jET48tNo" +
            "ufZSDTEUXr+ehirXHfajv9JFCVnWU3QNl6EvNosT72bV0KVKbi9dmm/vRGgyvGeERyWGHwk90Obz" +
            "QF2olkPvD01ptkIAUf25MElnPjaVBYDTzfT70IvFhIOVJgBjAgMBAAGjYzBhMB0GA1UdDgQWBBQ2" +
            "YeEAfIgFCVGLRGxH/xpMyepPEjAfBgNVHSMEGDAWgBQ2YeEAfIgFCVGLRGxH/xpMyepPEjAPBgNV" +
            "HRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwICBDANBgkqhkiG9w0BAQsFAAOCAgEAUzTWXuXLn/KI" +
            "qvo1dIrUxs1lYUk4zgRJNhUL4ddSd6N5Z2tKO63fERR5zdNKuIYuk2qRYYeKmsP4hul4PsTmp+t5" +
            "4i1iAuRjjxYD3mFzPfpwW982cwvAAcqWLgrrFgprek59/j4289zE1YURl7k/00B+ChhWOD4b8wMl" +
            "8HY0zglyA/mh7neES3Eskq9Bavy/kfE1mpbzNcCST4ckY6kQiXqxrXwWoIgC874Z5mO1NahXEtDQ" +
            "pyo6Du6BXnSnVpWc9GAH7t2hgiXeCh09DLBoi2Xs/Vj/NcWEqyjDRLAyvsyuX1c8OowO3MZqV3AE" +
            "U55gLhlHiO1VQ4Q8ynlTnLX92tKkC8AvndPsaxE2eK9n0RjcNmBLNlvEI+qA3Hz76vScknu6SesH" +
            "B55eRGdJcHOMR+2OA8fUQNSZX6KCzMN7TnSWR9Hp8T12snXwA92In3maRWlM4nB3i81SS7fXbxgd" +
            "Gx0CxOPhKihYDmb9hKD+vOg0Km1UtbvvZNKdsWzANdOUwSJO56a2mvFTNH560Sou8JWSsHR/mjQM" +
            "oW10VvcbJzgyfoPHheOds724iip4BCoqyuSxonqFwV+7WfQ9RjQR9jm92yjsMCFnRBZXv2Bf4es1" +
            "oHXqGjRg6lQay69vtA7VqIgdWgxIy1pfRZsiFMlJu5g/7xQ5MxfsJu3MlqUKQlU=");

    static byte[] getChallenge() {
        final SecureRandom random = new SecureRandom();
        final byte[] challenge = new byte[CHALLENGE_LENGTH];
        random.nextBytes(challenge);
        return challenge;
    }

    private static byte[] getFingerprint(final Certificate certificate)
            throws CertificateEncodingException {
        return FINGERPRINT_HASH_FUNCTION.hashBytes(certificate.getEncoded()).asBytes();
    }

    private static class Verified {
        final String device;
        final String verifiedBootKey;
        final byte[] verifiedBootHash;
        final String osName;
        final int osVersion;
        final int osPatchLevel;
        final int vendorPatchLevel;
        final int bootPatchLevel;
        final int appVersion;
        final int securityLevel;
        final boolean attestKey;
        final boolean enforceStrongBox;

        Verified(final String device, final String verifiedBootKey, final byte[] verifiedBootHash,
                final String osName, final int osVersion, final int osPatchLevel,
                final int vendorPatchLevel, final int bootPatchLevel, final int appVersion,
                final int securityLevel, final boolean attestKey, final boolean enforceStrongBox) {
            this.device = device;
            this.verifiedBootKey = verifiedBootKey;
            this.verifiedBootHash = verifiedBootHash;
            this.osName = osName;
            this.osVersion = osVersion;
            this.osPatchLevel = osPatchLevel;
            this.vendorPatchLevel = vendorPatchLevel;
            this.bootPatchLevel = bootPatchLevel;
            this.appVersion = appVersion;
            this.securityLevel = securityLevel;
            this.attestKey = attestKey;
            this.enforceStrongBox = enforceStrongBox;
        }
    }

    static X509Certificate generateCertificate(final InputStream in)
            throws CertificateException {
        return (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(in);
    }

    private static Verified verifyStateless(final Certificate[] certificates,
            final Cache<ByteBuffer, Boolean> pendingChallenges, final boolean hasPersistentKey,
            final Certificate root0, final Certificate root1, final Certificate root2)
            throws GeneralSecurityException {

        verifyCertificateSignatures(certificates, hasPersistentKey);

        // check that the root certificate is a valid key attestation root
        if (!Arrays.equals(root0.getEncoded(), certificates[certificates.length - 1].getEncoded()) &&
                !Arrays.equals(root1.getEncoded(), certificates[certificates.length - 1].getEncoded()) &&
                !Arrays.equals(root2.getEncoded(), certificates[certificates.length - 1].getEncoded())) {
            throw new GeneralSecurityException("root certificate is not a valid key attestation root");
        }

        final Attestation attestation = new Attestation((X509Certificate) certificates[0]);

        final int attestationSecurityLevel = attestation.getAttestationSecurityLevel();

        // enforce hardware-based attestation
        if (attestationSecurityLevel != Attestation.KM_SECURITY_LEVEL_TRUSTED_ENVIRONMENT &&
                attestationSecurityLevel != Attestation.KM_SECURITY_LEVEL_STRONG_BOX) {
            throw new GeneralSecurityException("attestation security level is not valid");
        }
        if (attestation.getKeymasterSecurityLevel() != attestationSecurityLevel) {
            throw new GeneralSecurityException("keymaster security level does not match attestation security level");
        }

        // prevent replay attacks
        final byte[] challenge = attestation.getAttestationChallenge();
        if (pendingChallenges.asMap().remove(ByteBuffer.wrap(challenge)) == null) {
            throw new GeneralSecurityException("challenge not pending");
        }

        // enforce communicating with the attestation app via OS level security
        final AuthorizationList softwareEnforced = attestation.getSoftwareEnforced();
        final AttestationApplicationId attestationApplicationId = softwareEnforced.getAttestationApplicationId();
        final List<AttestationPackageInfo> infos = attestationApplicationId.getAttestationPackageInfos();
        if (infos.size() != 1) {
            throw new GeneralSecurityException("wrong number of attestation packages");
        }
        final AttestationPackageInfo info = infos.get(0);
        if (!ATTESTATION_APP_PACKAGE_NAME.equals(info.getPackageName())) {
            throw new GeneralSecurityException("wrong attestation app package name: " + info.getPackageName());
        }
        final int appVersion = Math.toIntExact(info.getVersion()); // int for compatibility
        if (appVersion < ATTESTATION_APP_MINIMUM_VERSION) {
            throw new GeneralSecurityException("attestation app is too old: " + appVersion);
        }
        final List<byte[]> signatureDigests = attestationApplicationId.getSignatureDigests();
        if (signatureDigests.size() != 1) {
            throw new GeneralSecurityException("wrong number of attestation app signature digests");
        }
        final String signatureDigest = BaseEncoding.base16().encode(signatureDigests.get(0));
        if (!ATTESTATION_APP_SIGNATURE_DIGEST_RELEASE.equals(signatureDigest)) {
            if (!BuildConfig.DEBUG || !ATTESTATION_APP_SIGNATURE_DIGEST_DEBUG.equals(signatureDigest)) {
                throw new GeneralSecurityException("wrong attestation app signature digest");
            }
        }

        final AuthorizationList teeEnforced = attestation.getTeeEnforced();

        // verified boot security checks
        final RootOfTrust rootOfTrust = teeEnforced.getRootOfTrust();
        if (rootOfTrust == null) {
            throw new GeneralSecurityException("missing root of trust");
        }
        if (!rootOfTrust.isDeviceLocked()) {
            throw new GeneralSecurityException("device is not locked");
        }

        final int verifiedBootState = rootOfTrust.getVerifiedBootState();
        final String verifiedBootKey = BaseEncoding.base16().encode(rootOfTrust.getVerifiedBootKey());
        final DeviceInfo device;
        if (verifiedBootState == RootOfTrust.KM_VERIFIED_BOOT_SELF_SIGNED) {
            if (attestationSecurityLevel == Attestation.KM_SECURITY_LEVEL_STRONG_BOX) {
                device = fingerprintsStrongBoxCustomOS.get(verifiedBootKey);
            } else {
                device = fingerprintsCustomOS.get(verifiedBootKey);
            }
        } else if (verifiedBootState == RootOfTrust.KM_VERIFIED_BOOT_VERIFIED) {
            if (attestationSecurityLevel == Attestation.KM_SECURITY_LEVEL_STRONG_BOX) {
                device = fingerprintsStrongBoxStock.get(verifiedBootKey);
            } else {
                device = fingerprintsStock.get(verifiedBootKey);
            }
        } else {
            throw new GeneralSecurityException("verified boot state is not verified or self signed");
        }

        if (device == null) {
            throw new GeneralSecurityException("invalid verified boot key fingerprint: " + verifiedBootKey);
        }

        // OS version sanity checks
        final int osVersion = teeEnforced.getOsVersion();
        if (osVersion == DEVELOPER_PREVIEW_OS_VERSION) {
            throw new GeneralSecurityException("OS version is not a production release");
        } else if (osVersion < OS_VERSION_MINIMUM) {
            throw new GeneralSecurityException("OS version too old: " + osVersion);
        }
        final int osPatchLevel = teeEnforced.getOsPatchLevel();
        if (osPatchLevel < OS_PATCH_LEVEL_MINIMUM) {
            throw new GeneralSecurityException("OS patch level too old: " + osPatchLevel);
        }
        final int vendorPatchLevel;
        if (teeEnforced.getVendorPatchLevel() == null) {
            vendorPatchLevel = 0;
        } else {
            vendorPatchLevel = teeEnforced.getVendorPatchLevel();
            if (vendorPatchLevel < VENDOR_PATCH_LEVEL_MINIMUM && !extraPatchLevelMissing.contains(device.name)) {
                throw new GeneralSecurityException("Vendor patch level too old: " + vendorPatchLevel);
            }
        }
        final int bootPatchLevel;
        if (teeEnforced.getBootPatchLevel() == null) {
            bootPatchLevel = 0;
        } else {
            bootPatchLevel = teeEnforced.getBootPatchLevel();
            if (bootPatchLevel < BOOT_PATCH_LEVEL_MINIMUM && !extraPatchLevelMissing.contains(device.name)) {
                throw new GeneralSecurityException("Boot patch level too old: " + bootPatchLevel);
            }
        }

        // key sanity checks
        if (!teeEnforced.getPurposes().equals(
                ImmutableSet.of(AuthorizationList.KM_PURPOSE_SIGN, AuthorizationList.KM_PURPOSE_VERIFY))) {
            throw new GeneralSecurityException("key has invalid purposes");
        }
        if (teeEnforced.getOrigin() != AuthorizationList.KM_ORIGIN_GENERATED) {
            throw new GeneralSecurityException("key not origin generated");
        }
        if (teeEnforced.isAllApplications()) {
            throw new GeneralSecurityException("expected key only usable by attestation app");
        }
        if (device.rollbackResistant && !teeEnforced.isRollbackResistant()) {
            throw new GeneralSecurityException("expected rollback resistant key");
        }

        // version sanity checks
        final int attestationVersion = attestation.getAttestationVersion();
        if (attestationVersion < device.attestationVersion) {
            throw new GeneralSecurityException("attestation version " + attestationVersion + " below " + device.attestationVersion);
        }
        final int keymasterVersion = attestation.getKeymasterVersion();
        if (keymasterVersion < device.keymasterVersion) {
            throw new GeneralSecurityException("keymaster version " + keymasterVersion + " below " + device.keymasterVersion);
        }

        final byte[] verifiedBootHash = rootOfTrust.getVerifiedBootHash();
        if (attestationVersion >= 3 && verifiedBootHash == null) {
            throw new GeneralSecurityException("verifiedBootHash expected for attestation version >= 3");
        }

        boolean attestKey = false;
        try {
            final Attestation attestation1 = new Attestation((X509Certificate) certificates[1]);

            if (attestation1.getAttestationSecurityLevel() != attestation.getAttestationSecurityLevel()) {
                throw new GeneralSecurityException("attest key attestation security level does not match");
            }

            if (attestation1.getKeymasterSecurityLevel() != attestation.getKeymasterSecurityLevel()) {
                throw new GeneralSecurityException("attest key keymaster security level does not match");
            }

            final AuthorizationList teeEnforced1 = attestation1.getTeeEnforced();

            // verified boot security checks
            final RootOfTrust rootOfTrust1 = teeEnforced1.getRootOfTrust();
            if (rootOfTrust1 == null) {
                throw new GeneralSecurityException("attest key missing root of trust");
            }
            if (rootOfTrust1.isDeviceLocked() != rootOfTrust.isDeviceLocked()) {
                throw new GeneralSecurityException("attest key lock state does not match");
            }
            if (rootOfTrust1.getVerifiedBootState() != rootOfTrust.getVerifiedBootState()) {
                throw new GeneralSecurityException("attest key verified boot state does not match");
            }
            if (!Arrays.equals(rootOfTrust1.getVerifiedBootKey(), rootOfTrust.getVerifiedBootKey())) {
                throw new GeneralSecurityException("attest key verified boot key does not match");
            }

            // key sanity checks
            if (!teeEnforced1.getPurposes().equals(ImmutableSet.of(AuthorizationList.KM_PURPOSE_ATTEST_KEY))) {
                throw new GeneralSecurityException("attest key has invalid purposes");
            }
            if (teeEnforced1.getOrigin() != AuthorizationList.KM_ORIGIN_GENERATED) {
                throw new GeneralSecurityException("attest key not origin generated");
            }
            if (teeEnforced1.isAllApplications()) {
                throw new GeneralSecurityException("expected attest key only usable by attestation app");
            }
            if (device.rollbackResistant && !teeEnforced1.isRollbackResistant()) {
                throw new GeneralSecurityException("expected rollback resistant attest key");
            }

            if (!hasPersistentKey) {
                if (!Arrays.equals(attestation1.getAttestationChallenge(), attestation.getAttestationChallenge())) {
                    throw new GeneralSecurityException("attest key challenge does not match");
                }

                if (!attestation1.getSoftwareEnforced().getAttestationApplicationId().equals(attestationApplicationId)) {
                    throw new GeneralSecurityException("attest key application does not match");
                }

                // version sanity checks
                if (attestation1.getAttestationVersion() != attestation.getAttestationVersion()) {
                    throw new GeneralSecurityException("attest key attestation version does not match");
                }
                if (attestation1.getKeymasterVersion() != attestation.getKeymasterVersion()) {
                    throw new GeneralSecurityException("attest key keymaster version does not match");
                }

                // OS version sanity checks
                if (!teeEnforced1.getOsVersion().equals(teeEnforced.getOsVersion())) {
                    throw new GeneralSecurityException("attest key OS version does not match");
                }
                if (!teeEnforced1.getOsPatchLevel().equals(teeEnforced.getOsPatchLevel())) {
                    throw new GeneralSecurityException("attest key OS patch level does not match");
                }
                if (!teeEnforced1.getVendorPatchLevel().equals(teeEnforced.getVendorPatchLevel())) {
                    throw new GeneralSecurityException("attest key vendor patch level does not match");
                }
                if (!teeEnforced1.getBootPatchLevel().equals(teeEnforced.getBootPatchLevel())) {
                    throw new GeneralSecurityException("attest key boot patch level does not match");
                }

                if (!Arrays.equals(rootOfTrust1.getVerifiedBootHash(), rootOfTrust.getVerifiedBootHash())) {
                    throw new GeneralSecurityException("attest key verified boot hash does not match");
                }
            }

            attestKey = true;
        } catch (final Attestation.KeyDescriptionMissingException e) {}

        for (int i = 2; i < certificates.length; i++) {
            try {
                new Attestation((X509Certificate) certificates[i]);
            } catch (final Attestation.KeyDescriptionMissingException e) {
                continue;
            }
            throw new GeneralSecurityException("only initial key and attest key should have attestation extension");
        }

        return new Verified(device.name, verifiedBootKey, verifiedBootHash, device.osName,
                osVersion, osPatchLevel, vendorPatchLevel, bootPatchLevel, appVersion,
                attestationSecurityLevel, attestKey, device.enforceStrongBox);
    }

    // Only checks expiry beyond the initial certificate for the initial pairing since the
    // certificates are short lived when remote provisioning is in use and we prevent rotation by
    // using the attest key feature to provide permanent pairing-specific certificate chains in
    // order to pin them.
    private static void verifyCertificateSignatures(Certificate[] certChain, final boolean hasPersistentKey)
            throws GeneralSecurityException {
        for (int i = 1; i < certChain.length; ++i) {
            try {
                if (i != 1) {
                    if (i == 1 || !hasPersistentKey) {
                        ((X509Certificate) certChain[i - 1]).checkValidity();
                    }
                }
                certChain[i - 1].verify(certChain[i].getPublicKey());
            } catch (InvalidKeyException | CertificateException | NoSuchAlgorithmException
                    | NoSuchProviderException | SignatureException e) {
                throw new GeneralSecurityException("Failed to verify certificate "
                        + certChain[i - 1] + " with public key " + certChain[i].getPublicKey(), e);
            }
        }

        // Last cert is self-signed.
        final int i = certChain.length - 1;
        try {
            if (i == 0 || !hasPersistentKey) {
                ((X509Certificate) certChain[i]).checkValidity();
            }
            certChain[i].verify(certChain[i].getPublicKey());
        } catch (CertificateException e) {
            throw new GeneralSecurityException(
                    "Root cert " + certChain[i] + " is not correctly self-signed", e);
        }
    }

    private static String formatPatchLevel(final int patchLevel) {
        final String s = Integer.toString(patchLevel);
        return s.substring(0, 4) + "-" + s.substring(4, 6) +
                (s.length() >= 8 ? "-" + s.substring(6, 8) : "");
    }

    private static void verifySignature(final PublicKey key, final ByteBuffer message,
            final byte[] signature) throws GeneralSecurityException {
        final Signature sig = Signature.getInstance(SIGNATURE_ALGORITHM);
        sig.initVerify(key);
        sig.update(message);
        if (!sig.verify(signature)) {
            throw new GeneralSecurityException("signature verification failed");
        }
    }

    private static String toYesNoString(final boolean value) {
        return value ? "yes" : "no";
    }

    private static void verify(final byte[] fingerprint,
            final Cache<ByteBuffer, Boolean> pendingChallenges, final long userId,
            final boolean paired, final ByteBuffer signedMessage, final byte[] signature,
            final Certificate[] attestationCertificates, final boolean userProfileSecure,
            final boolean accessibility, final boolean deviceAdmin,
            final boolean deviceAdminNonSystem, final boolean adbEnabled,
            final boolean addUsersWhenLocked, final boolean enrolledBiometrics,
            final boolean denyNewUsb, final boolean oemUnlockAllowed, final boolean systemUser)
            throws GeneralSecurityException, IOException, SQLiteException {
        final String fingerprintHex = BaseEncoding.base16().encode(fingerprint);
        final byte[] currentFingerprint = getFingerprint(attestationCertificates[0]);
        final boolean hasPersistentKey = !Arrays.equals(currentFingerprint, fingerprint);
        if (paired && !hasPersistentKey) {
            throw new GeneralSecurityException("must be authenticated with subscribeKey for initial verification");
        }

        final SQLiteConnection conn = AttestationServer.open(ATTESTATION_DATABASE);
        try {
            conn.exec("BEGIN IMMEDIATE TRANSACTION");

            Certificate[] pinnedCertificates = null;
            byte[] pinnedVerifiedBootKey = null;
            int pinnedOsVersion = Integer.MAX_VALUE;
            int pinnedOsPatchLevel = Integer.MAX_VALUE;
            int pinnedVendorPatchLevel = 0;
            int pinnedBootPatchLevel = 0;
            int pinnedAppVersion = Integer.MAX_VALUE;
            int pinnedSecurityLevel = 1;
            if (hasPersistentKey) {
                final SQLiteStatement st = conn.prepare("SELECT pinnedCertificates, " +
                        "pinnedVerifiedBootKey, pinnedOsVersion, pinnedOsPatchLevel, " +
                        "pinnedVendorPatchLevel, pinnedBootPatchLevel, pinnedAppVersion, " +
                        "pinnedSecurityLevel, userId " +
                        "FROM Devices WHERE fingerprint = ?");
                try {
                    st.bind(1, fingerprint);
                    if (st.step()) {
                        try {
                            pinnedCertificates = decodeChain(DEFLATE_DICTIONARY_2, st.columnBlob(0));
                        } catch (final DataFormatException e) {
                            throw new IOException(e);
                        }
                        pinnedVerifiedBootKey = st.columnBlob(1);
                        pinnedOsVersion = st.columnInt(2);
                        pinnedOsPatchLevel = st.columnInt(3);
                        pinnedVendorPatchLevel = st.columnInt(4);
                        pinnedBootPatchLevel = st.columnInt(5);
                        pinnedAppVersion = st.columnInt(6);
                        pinnedSecurityLevel = st.columnInt(7);
                        if (userId != st.columnLong(8)) {
                            throw new GeneralSecurityException("wrong userId");
                        }
                    } else {
                        throw new GeneralSecurityException(
                                "Pairing data for this Auditee is missing. Cannot perform paired attestation.\n" +
                                "\nEither the initial pairing was incomplete or the device is compromised.\n" +
                                "\nIf the initial pairing was simply not completed, clear the pairing data on either the Auditee or the Auditor via the menu and try again.\n");
                    }
                } finally {
                    st.dispose();
                }
            }

            final Verified verified = verifyStateless(attestationCertificates, pendingChallenges, hasPersistentKey,
                    generateCertificate(new ByteArrayInputStream(GOOGLE_ROOT_CERTIFICATE_0.getBytes())),
                    generateCertificate(new ByteArrayInputStream(GOOGLE_ROOT_CERTIFICATE_1.getBytes())),
                    generateCertificate(new ByteArrayInputStream(GOOGLE_ROOT_CERTIFICATE_2.getBytes())));
            final byte[] verifiedBootKey = BaseEncoding.base16().decode(verified.verifiedBootKey);

            final long now = new Date().getTime();

            boolean attestKeyMigration = false;
            if (hasPersistentKey) {
                final int chainOffset;
                final int pinOffset;
                if (attestationCertificates.length != pinnedCertificates.length) {
                    if (attestationCertificates.length == 5 && pinnedCertificates.length == 4) {
                        // backwards compatible use of attest key without the security benefits for
                        // forward compatibility with remote provisioning
                        chainOffset = 1;
                        pinOffset = 0;
                        attestKeyMigration = true;
                    } else if (ALLOW_ATTEST_KEY_DOWNGRADE && attestationCertificates.length == 4 && pinnedCertificates.length == 5) {
                        // temporarily work around attest key breakage by allowing not using it
                        chainOffset = 0;
                        pinOffset = 1;
                    } else {
                        throw new GeneralSecurityException("certificate chain length mismatch");
                    }
                } else {
                    chainOffset = 0;
                    pinOffset = 0;
                }
                for (int i = 1 + chainOffset; i < attestationCertificates.length; i++) {
                    if (!Arrays.equals(attestationCertificates[i].getEncoded(), pinnedCertificates[i - chainOffset + pinOffset].getEncoded())) {
                        throw new GeneralSecurityException("certificate chain mismatch");
                    }
                }

                final Certificate persistentCertificate = pinnedCertificates[0];
                if (!Arrays.equals(fingerprint, getFingerprint(persistentCertificate))) {
                    throw new GeneralSecurityException("corrupt Auditor pinning data");
                }
                verifySignature(persistentCertificate.getPublicKey(), signedMessage, signature);

                if (!Arrays.equals(verifiedBootKey, pinnedVerifiedBootKey)) {
                    final String legacyFingerprint = fingerprintsMigration.get(verified.verifiedBootKey);
                    if (legacyFingerprint != null && legacyFingerprint.equals(BaseEncoding.base16().encode(pinnedVerifiedBootKey))) {
                        //Log.d(TAG, "migration from legacy fingerprint " + legacyFingerprint + " to " + verified.verifiedBootKey);
                    } else {
                        throw new GeneralSecurityException("pinned verified boot key mismatch");
                    }
                }
                if (verified.osVersion < pinnedOsVersion) {
                    throw new GeneralSecurityException("OS version downgrade detected");
                }
                if (verified.osPatchLevel < pinnedOsPatchLevel) {
                    throw new GeneralSecurityException("OS patch level downgrade detected");
                }
                if (verified.vendorPatchLevel < pinnedVendorPatchLevel) {
                    throw new GeneralSecurityException("Vendor patch level downgrade detected");
                }
                if (verified.bootPatchLevel < pinnedBootPatchLevel) {
                    throw new GeneralSecurityException("Boot patch level downgrade detected");
                }
                if (verified.appVersion < pinnedAppVersion) {
                    throw new GeneralSecurityException("App version downgraded");
                }
                if (verified.securityLevel != pinnedSecurityLevel) {
                    throw new GeneralSecurityException("Security level mismatch");
                }

                final SQLiteStatement update = conn.prepare("UPDATE Devices SET " +
                        "pinnedVerifiedBootKey = ?, verifiedBootHash = ?, " +
                        "pinnedOsVersion = ?, pinnedOsPatchLevel = ?, " +
                        "pinnedVendorPatchLevel = ?, pinnedBootPatchLevel = ?, " +
                        "pinnedAppVersion = ?, pinnedSecurityLevel = ?, userProfileSecure = ?, enrolledBiometrics = ?, " +
                        "accessibility = ?, deviceAdmin = ?, adbEnabled = ?, " +
                        "addUsersWhenLocked = ?, denyNewUsb = ?, oemUnlockAllowed = ?, " +
                        "systemUser = ?, verifiedTimeLast = ?, attestKey = ? " +
                        "WHERE fingerprint = ?");
                try {
                    // handle migration to v2 verified boot key fingerprint
                    update.bind(1, verifiedBootKey);
                    update.bind(2, verified.verifiedBootHash);
                    update.bind(3, verified.osVersion);
                    update.bind(4, verified.osPatchLevel);
                    if (verified.vendorPatchLevel != 0) {
                        update.bind(5, verified.vendorPatchLevel);
                    }
                    if (verified.bootPatchLevel != 0) {
                        update.bind(6, verified.bootPatchLevel);
                    }
                    update.bind(7, verified.appVersion);
                    update.bind(8, verified.securityLevel);
                    update.bind(9, userProfileSecure ? 1 : 0);
                    update.bind(10, enrolledBiometrics ? 1 : 0);
                    update.bind(11, accessibility ? 1 : 0);
                    update.bind(12, deviceAdmin ? (deviceAdminNonSystem ? 2 : 1) : 0);
                    update.bind(13, adbEnabled ? 1 : 0);
                    update.bind(14, addUsersWhenLocked ? 1 : 0);
                    update.bind(15, denyNewUsb ? 1 : 0);
                    update.bind(16, oemUnlockAllowed ? 1 : 0);
                    update.bind(17, systemUser ? 1 : 0);
                    update.bind(18, now);
                    update.bind(19, (verified.attestKey && !attestKeyMigration) ? 1 : 0);
                    update.bind(20, fingerprint);
                    update.step();
                } finally {
                    update.dispose();
                }
            } else {
                verifySignature(attestationCertificates[0].getPublicKey(), signedMessage, signature);

                if (verified.enforceStrongBox && verified.securityLevel != Attestation.KM_SECURITY_LEVEL_STRONG_BOX) {
                    throw new GeneralSecurityException("non-StrongBox security level for initial pairing with StrongBox device");
                }

                final SQLiteStatement insert = conn.prepare("INSERT INTO Devices " +
                        "(fingerprint, pinnedCertificates, attestKey, pinnedVerifiedBootKey, " +
                        "verifiedBootHash, pinnedOsVersion, pinnedOsPatchLevel, " +
                        "pinnedVendorPatchLevel, pinnedBootPatchLevel, pinnedAppVersion, pinnedSecurityLevel, " +
                        "userProfileSecure, enrolledBiometrics, accessibility, deviceAdmin, " +
                        "adbEnabled, addUsersWhenLocked, denyNewUsb, oemUnlockAllowed, systemUser, " +
                        "verifiedTimeFirst, verifiedTimeLast, userId) " +
                        "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                try {
                    insert.bind(1, fingerprint);
                    insert.bind(2, encodeChain(DEFLATE_DICTIONARY_2, attestationCertificates));
                    insert.bind(3, verified.attestKey ? 1 : 0);
                    insert.bind(4, verifiedBootKey);
                    insert.bind(5, verified.verifiedBootHash);
                    insert.bind(6, verified.osVersion);
                    insert.bind(7, verified.osPatchLevel);
                    if (verified.vendorPatchLevel != 0) {
                        insert.bind(8, verified.vendorPatchLevel);
                    }
                    if (verified.bootPatchLevel != 0) {
                        insert.bind(9, verified.bootPatchLevel);
                    }
                    insert.bind(10, verified.appVersion);
                    insert.bind(11, verified.securityLevel);
                    insert.bind(12, userProfileSecure ? 1 : 0);
                    insert.bind(13, enrolledBiometrics ? 1 : 0);
                    insert.bind(14, accessibility ? 1 : 0);
                    insert.bind(15, deviceAdmin ? (deviceAdminNonSystem ? 2 : 1) : 0);
                    insert.bind(16, adbEnabled ? 1 : 0);
                    insert.bind(17, addUsersWhenLocked ? 1 : 0);
                    insert.bind(18, denyNewUsb ? 1 : 0);
                    insert.bind(19, oemUnlockAllowed ? 1 : 0);
                    insert.bind(20, systemUser ? 1 : 0);
                    insert.bind(21, now);
                    insert.bind(22, now);
                    insert.bind(23, userId);
                    insert.step();
                } finally {
                    insert.dispose();
                }
            }

            final SQLiteStatement insert = conn.prepare("INSERT INTO Attestations " +
                    "(fingerprint, time, strong, osVersion, osPatchLevel, vendorPatchLevel, " +
                    "bootPatchLevel, verifiedBootHash, appVersion, userProfileSecure, " +
                    "enrolledBiometrics, accessibility, deviceAdmin, adbEnabled, " +
                    "addUsersWhenLocked, denyNewUsb, oemUnlockAllowed, systemUser)" +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            try {
                insert.bind(1, fingerprint);
                insert.bind(2, now);
                insert.bind(3, hasPersistentKey ? 1 : 0);
                insert.bind(4, verified.osVersion);
                insert.bind(5, verified.osPatchLevel);
                if (verified.vendorPatchLevel != 0) {
                    insert.bind(6, verified.vendorPatchLevel);
                }
                if (verified.bootPatchLevel != 0) {
                    insert.bind(7, verified.bootPatchLevel);
                }
                insert.bind(8, verified.verifiedBootHash);
                insert.bind(9, verified.appVersion);
                insert.bind(10, userProfileSecure ? 1 : 0);
                insert.bind(11, enrolledBiometrics ? 1 : 0);
                insert.bind(12, accessibility ? 1 : 0);
                insert.bind(13, deviceAdmin ? (deviceAdminNonSystem ? 2 : 1) : 0);
                insert.bind(14, adbEnabled ? 1 : 0);
                insert.bind(15, addUsersWhenLocked ? 1 : 0);
                insert.bind(16, denyNewUsb ? 1 : 0);
                insert.bind(17, oemUnlockAllowed ? 1 : 0);
                insert.bind(18, systemUser ? 1 : 0);

                insert.step();
            } finally {
                insert.dispose();
            }

            conn.exec("COMMIT TRANSACTION");
        } finally {
            conn.dispose();
        }
    }

    static Certificate[] decodeChain(final byte[] dictionary, final byte[] compressedChain)
            throws DataFormatException, GeneralSecurityException {
        final byte[] chain = new byte[MAX_ENCODED_CHAIN_LENGTH];
        final Inflater inflater = new Inflater(true);
        inflater.setInput(compressedChain);
        inflater.setDictionary(dictionary);
        final int chainLength = inflater.inflate(chain);
        if (!inflater.finished()) {
            throw new GeneralSecurityException("certificate chain is too large");
        }
        inflater.end();

        final ByteBuffer chainDeserializer = ByteBuffer.wrap(chain, 0, chainLength);
        final List<Certificate> certs = new ArrayList<>();
        while (chainDeserializer.hasRemaining()) {
            final short encodedLength = chainDeserializer.getShort();
            final byte[] encoded = new byte[encodedLength];
            chainDeserializer.get(encoded);
            certs.add(generateCertificate(new ByteArrayInputStream(encoded)));
        }
        return certs.toArray(new Certificate[0]);
    }

    static byte[] encodeChain(final byte[] dictionary, final Certificate[] certificates)
            throws CertificateEncodingException, IOException {
        final ByteBuffer chainSerializer = ByteBuffer.allocate(MAX_ENCODED_CHAIN_LENGTH);
        for (int i = 0; i < certificates.length; i++) {
            final byte[] encoded = certificates[i].getEncoded();
            if (encoded.length > Short.MAX_VALUE) {
                throw new RuntimeException("encoded certificate too long");
            }
            chainSerializer.putShort((short) encoded.length);
            chainSerializer.put(encoded);
        }
        chainSerializer.flip();
        final byte[] chain = new byte[chainSerializer.remaining()];
        chainSerializer.get(chain);

        if (chain.length > MAX_ENCODED_CHAIN_LENGTH) {
            throw new RuntimeException("encoded certificate chain too long");
        }

        final ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        final Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION, true);
        deflater.setDictionary(dictionary);
        final DeflaterOutputStream deflaterStream = new DeflaterOutputStream(byteStream, deflater);
        deflaterStream.write(chain);
        deflaterStream.finish();
        final byte[] compressed = byteStream.toByteArray();

        return compressed;
    }

    static void verifySerialized(final byte[] attestationResult,
            final Cache<ByteBuffer, Boolean> pendingChallenges, final long userId, final boolean paired)
            throws DataFormatException, GeneralSecurityException, IOException, SQLiteException {
        final ByteBuffer deserializer = ByteBuffer.wrap(attestationResult);
        final byte version = deserializer.get();
        if (version > PROTOCOL_VERSION) {
            throw new GeneralSecurityException("invalid protocol version: " + version);
        } else if (version < PROTOCOL_VERSION_MINIMUM) {
            throw new GeneralSecurityException("Auditee protocol version too old: " + version);
        }

        final short compressedChainLength = deserializer.getShort();
        final byte[] compressedChain = new byte[compressedChainLength];
        deserializer.get(compressedChain);

        final byte[] dictionary = version < 3 ? DEFLATE_DICTIONARY_2 : DEFLATE_DICTIONARY_3;
        final Certificate[] certificates = decodeChain(dictionary, compressedChain);

        final byte[] fingerprint = new byte[FINGERPRINT_LENGTH];
        deserializer.get(fingerprint);

        final int osEnforcedFlags = deserializer.getInt();
        if ((osEnforcedFlags & ~OS_ENFORCED_FLAGS_ALL) != 0) {
            logger.info("unknown OS enforced flag set (flags: " + Integer.toBinaryString(osEnforcedFlags) + ")");
        }
        final boolean userProfileSecure = (osEnforcedFlags & OS_ENFORCED_FLAGS_USER_PROFILE_SECURE) != 0;
        final boolean accessibility = (osEnforcedFlags & OS_ENFORCED_FLAGS_ACCESSIBILITY) != 0;
        final boolean deviceAdmin = (osEnforcedFlags & OS_ENFORCED_FLAGS_DEVICE_ADMIN) != 0;
        final boolean deviceAdminNonSystem = (osEnforcedFlags & OS_ENFORCED_FLAGS_DEVICE_ADMIN_NON_SYSTEM) != 0;
        final boolean adbEnabled = (osEnforcedFlags & OS_ENFORCED_FLAGS_ADB_ENABLED) != 0;
        final boolean addUsersWhenLocked = (osEnforcedFlags & OS_ENFORCED_FLAGS_ADD_USERS_WHEN_LOCKED) != 0;
        final boolean enrolledBiometrics = (osEnforcedFlags & OS_ENFORCED_FLAGS_ENROLLED_BIOMETRICS) != 0;
        final boolean denyNewUsb = (osEnforcedFlags & OS_ENFORCED_FLAGS_DENY_NEW_USB) != 0;
        final boolean oemUnlockAllowed = (osEnforcedFlags & OS_ENFORCED_FLAGS_OEM_UNLOCK_ALLOWED) != 0;
        final boolean systemUser = (osEnforcedFlags & OS_ENFORCED_FLAGS_SYSTEM_USER) != 0;

        if (deviceAdminNonSystem && !deviceAdmin) {
            throw new GeneralSecurityException("invalid device administrator state");
        }

        final int signatureLength = deserializer.remaining();
        final byte[] signature = new byte[signatureLength];
        deserializer.get(signature);

        deserializer.rewind();
        deserializer.limit(deserializer.capacity() - signature.length);

        verify(fingerprint, pendingChallenges, userId, paired, deserializer.asReadOnlyBuffer(), signature,
                certificates, userProfileSecure, accessibility, deviceAdmin, deviceAdminNonSystem,
                adbEnabled, addUsersWhenLocked, enrolledBiometrics, denyNewUsb, oemUnlockAllowed,
                systemUser);
    }
}
